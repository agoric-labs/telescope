"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.plugin = void 0;
const path_1 = require("path");
const mkdirp_1 = require("mkdirp");
const package_json_1 = __importDefault(require("../../package.json"));
const files_1 = require("../utils/files");
const helpers_1 = require("../helpers");
const version = process.env.NODE_ENV === 'test' ? 'latest' : package_json_1.default.version;
const header = `/**
* This file and any referenced files were automatically generated by ${package_json_1.default.name}@${version}
* DO NOT MODIFY BY HAND. Instead, download the latest proto files for your chain
* and run the transpile command or npm scripts command that is used to regenerate this bundle.
*/
\n`;
const write = (builder, indexFile, content) => {
    const indexOutFile = (0, path_1.join)(builder.outPath, indexFile);
    mkdirp_1.mkdirp.sync((0, path_1.dirname)(indexOutFile));
    (0, files_1.writeContentToFile)(builder.outPath, builder.options, header + content, indexOutFile);
};
const plugin = (builder) => {
    write(builder, 'helpers.ts', builder.options.prototypes.typingsFormat.num64 === 'bigint' ? (0, helpers_1.getHelperForBigint)(builder.options) : (0, helpers_1.getHelper)(builder.options));
    // should be exported
    if (builder.options.stargateClients.addGetTxRpc || builder.options.includeExternalHelpers || builder.options.reactQuery?.enabled) {
        // also react-query needs these...
        builder.files.push('extern.ts');
        write(builder, 'extern.ts', builder.options.rpcClients?.useConnectComet ? helpers_1.externalComet : helpers_1.external);
    }
    if (builder.options.reactQuery?.enabled) {
        builder.files.push('react-query.ts');
        write(builder, 'react-query.ts', (0, helpers_1.getReactQueryHelper)(builder.options));
    }
    if (builder.options.mobx?.enabled) {
        builder.files.push('mobx.ts');
        write(builder, 'mobx.ts', helpers_1.mobx);
    }
    if (builder.options.pinia?.enabled) {
        builder.files.push('pinia-endpoint.ts');
        write(builder, 'pinia-endpoint.ts', helpers_1.pinia);
    }
    if (builder.options.rpcClients?.type === 'grpc-gateway') {
        builder.files.push('grpc-gateway.ts');
        write(builder, 'grpc-gateway.ts', helpers_1.grpcGateway);
    }
    if (builder.options.rpcClients?.type === 'grpc-web') {
        builder.files.push('grpc-web.ts');
        write(builder, 'grpc-web.ts', helpers_1.grpcWeb);
    }
    if (!builder.options.prototypes.typingsFormat.toJsonUnknown && builder.options.prototypes.methods.toJSON) {
        builder.files.push("json-safe.ts");
        write(builder, "json-safe.ts", helpers_1.jsonSafe);
    }
    if (builder.options.prototypes.typingsFormat.num64 === "bigint") {
        builder.files.push("varint.ts");
        write(builder, "varint.ts", helpers_1.varint);
        builder.files.push("utf8.ts");
        write(builder, "utf8.ts", helpers_1.utf8);
        builder.files.push("binary.ts");
        write(builder, "binary.ts", (0, helpers_1.getHelperForBinary)(builder.options));
    }
    if (builder.options.prototypes?.typingsFormat?.useTelescopeGeneratedType || builder.options.interfaces?.enabled && builder.options.interfaces?.useGlobalDecoderRegistry) {
        builder.files.push('types.ts');
        write(builder, 'types.ts', (0, helpers_1.getTypesHelper)(builder.options));
    }
    if (builder.options.interfaces?.enabled && builder.options.interfaces?.useGlobalDecoderRegistry) {
        builder.files.push('registry.ts');
        write(builder, 'registry.ts', (0, helpers_1.getRegistryHelper)(builder.options));
    }
};
exports.plugin = plugin;
