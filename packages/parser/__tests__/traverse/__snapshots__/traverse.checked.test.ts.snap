// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`google/api/expr/v1alpha1/checked 1`] = `
{
  "acceptsInterface": {},
  "implementsInterface": {},
  "importNames": {},
  "imports": [
    "google/api/expr/v1alpha1/syntax.proto",
    "google/protobuf/empty.proto",
    "google/protobuf/struct.proto",
  ],
  "package": "google.api.expr.v1alpha1",
  "parsedExports": {
    "CheckedExpr": true,
    "Decl": true,
    "Reference": true,
    "Type": true,
  },
  "parsedImports": {
    "google/api/expr/v1alpha1/syntax.proto": [
      "SourceInfo",
      "Expr",
      "Constant",
    ],
    "google/protobuf/empty.proto": [
      "Empty",
    ],
    "google/protobuf/struct.proto": [
      "NullValue",
    ],
  },
  "root": {
    "nested": {
      "google": {
        "nested": {
          "api": {
            "nested": {
              "expr": {
                "nested": {
                  "v1alpha1": {
                    "nested": {
                      "CheckedExpr": {
                        "comment": "A CEL expression which has been successfully type checked.",
                        "fields": {
                          "expr": {
                            "comment": "The checked expression. Semantically equivalent to the parsed \`expr\`, but
 may have structural differences.",
                            "id": 4,
                            "import": "google/api/expr/v1alpha1/syntax.proto",
                            "importedName": "Expr",
                            "options": {
                              "(telescope:camel)": "expr",
                              "(telescope:name)": "expr",
                              "(telescope:orig)": "expr",
                            },
                            "parsedType": {
                              "name": "Expr",
                              "type": "Type",
                            },
                            "scope": [
                              [
                                "google.api.expr.v1alpha1",
                              ],
                            ],
                            "scopeType": "import",
                            "type": "Expr",
                          },
                          "exprVersion": {
                            "comment": "The expr version indicates the major / minor version number of the \`expr\`
 representation.

 The most common reason for a version change will be to indicate to the CEL
 runtimes that transformations have been performed on the expr during static
 analysis. In some cases, this will save the runtime the work of applying
 the same or similar transformations prior to evaluation.",
                            "id": 6,
                            "isScalar": true,
                            "options": {
                              "(telescope:camel)": "exprVersion",
                              "(telescope:name)": "exprVersion",
                              "(telescope:orig)": "expr_version",
                            },
                            "parsedType": {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "referenceMap": {
                            "comment": "A map from expression ids to resolved references.

 The following entries are in this table:

 - An Ident or Select expression is represented here if it resolves to a
   declaration. For instance, if \`a.b.c\` is represented by
   \`select(select(id(a), b), c)\`, and \`a.b\` resolves to a declaration,
   while \`c\` is a field selection, then the reference is attached to the
   nested select expression (but not to the id or or the outer select).
   In turn, if \`a\` resolves to a declaration and \`b.c\` are field selections,
   the reference is attached to the ident expression.
 - Every Call expression has an entry here, identifying the function being
   called.
 - Every CreateStruct expression for a message has an entry, identifying
   the message.",
                            "id": 2,
                            "keyType": "int64",
                            "options": {
                              "(telescope:camel)": "referenceMap",
                              "(telescope:name)": "referenceMap",
                              "(telescope:orig)": "reference_map",
                            },
                            "parsedType": {
                              "name": "Reference",
                              "type": "Type",
                            },
                            "scope": [
                              "google.api.expr.v1alpha1",
                            ],
                            "type": "Reference",
                          },
                          "sourceInfo": {
                            "comment": "The source info derived from input that generated the parsed \`expr\` and
 any optimizations made during the type-checking pass.",
                            "id": 5,
                            "import": "google/api/expr/v1alpha1/syntax.proto",
                            "importedName": "SourceInfo",
                            "options": {
                              "(telescope:camel)": "sourceInfo",
                              "(telescope:name)": "sourceInfo",
                              "(telescope:orig)": "source_info",
                            },
                            "parsedType": {
                              "name": "SourceInfo",
                              "type": "Type",
                            },
                            "scope": [
                              [
                                "google.api.expr.v1alpha1",
                              ],
                            ],
                            "scopeType": "import",
                            "type": "SourceInfo",
                          },
                          "typeMap": {
                            "comment": "A map from expression ids to types.

 Every expression node which has a type different than DYN has a mapping
 here. If an expression has type DYN, it is omitted from this map to save
 space.",
                            "id": 3,
                            "keyType": "int64",
                            "options": {
                              "(telescope:camel)": "typeMap",
                              "(telescope:name)": "typeMap",
                              "(telescope:orig)": "type_map",
                            },
                            "parsedType": {
                              "name": "Type",
                              "type": "Type",
                            },
                            "scope": [
                              "google.api.expr.v1alpha1",
                            ],
                            "type": "Type",
                          },
                        },
                        "keyTypes": [
                          {
                            "comment": "A map from expression ids to resolved references.

 The following entries are in this table:

 - An Ident or Select expression is represented here if it resolves to a
   declaration. For instance, if \`a.b.c\` is represented by
   \`select(select(id(a), b), c)\`, and \`a.b\` resolves to a declaration,
   while \`c\` is a field selection, then the reference is attached to the
   nested select expression (but not to the id or or the outer select).
   In turn, if \`a\` resolves to a declaration and \`b.c\` are field selections,
   the reference is attached to the ident expression.
 - Every Call expression has an entry here, identifying the function being
   called.
 - Every CreateStruct expression for a message has an entry, identifying
   the message.",
                            "id": 2,
                            "keyType": "int64",
                            "name": "referenceMap",
                            "options": {
                              "(telescope:camel)": "referenceMap",
                              "(telescope:name)": "referenceMap",
                              "(telescope:orig)": "reference_map",
                            },
                            "parsedType": {
                              "name": "Reference",
                              "type": "Type",
                            },
                            "scope": [
                              "google.api.expr.v1alpha1",
                            ],
                            "type": "Reference",
                          },
                          {
                            "comment": "A map from expression ids to types.

 Every expression node which has a type different than DYN has a mapping
 here. If an expression has type DYN, it is omitted from this map to save
 space.",
                            "id": 3,
                            "keyType": "int64",
                            "name": "typeMap",
                            "options": {
                              "(telescope:camel)": "typeMap",
                              "(telescope:name)": "typeMap",
                              "(telescope:orig)": "type_map",
                            },
                            "parsedType": {
                              "name": "Type",
                              "type": "Type",
                            },
                            "scope": [
                              "google.api.expr.v1alpha1",
                            ],
                            "type": "Type",
                          },
                        ],
                        "name": "CheckedExpr",
                        "nested": null,
                        "oneofs": undefined,
                        "options": undefined,
                        "package": "google.api.expr.v1alpha1",
                        "type": "Type",
                      },
                      "Decl": {
                        "comment": "Represents a declaration of a named value or function.

 A declaration is part of the contract between the expression, the agent
 evaluating that expression, and the caller requesting evaluation.",
                        "fields": {
                          "function": {
                            "comment": "Function declaration.",
                            "id": 3,
                            "options": {
                              "(telescope:camel)": "function",
                              "(telescope:name)": "function",
                              "(telescope:orig)": "function",
                            },
                            "parsedType": {
                              "name": "FunctionDecl",
                              "type": "Type",
                            },
                            "scope": [
                              "google.api.expr.v1alpha1",
                              "Decl",
                            ],
                            "type": "FunctionDecl",
                          },
                          "ident": {
                            "comment": "Identifier declaration.",
                            "id": 2,
                            "options": {
                              "(telescope:camel)": "ident",
                              "(telescope:name)": "ident",
                              "(telescope:orig)": "ident",
                            },
                            "parsedType": {
                              "name": "IdentDecl",
                              "type": "Type",
                            },
                            "scope": [
                              "google.api.expr.v1alpha1",
                              "Decl",
                            ],
                            "type": "IdentDecl",
                          },
                          "name": {
                            "comment": "The fully qualified name of the declaration.

 Declarations are organized in containers and this represents the full path
 to the declaration in its container, as in \`google.api.expr.Decl\`.

 Declarations used as [FunctionDecl.Overload][google.api.expr.v1alpha1.Decl.FunctionDecl.Overload] parameters may or may not
 have a name depending on whether the overload is function declaration or a
 function definition containing a result [Expr][google.api.expr.v1alpha1.Expr].",
                            "id": 1,
                            "isScalar": true,
                            "options": {
                              "(telescope:camel)": "name",
                              "(telescope:name)": "name",
                              "(telescope:orig)": "name",
                            },
                            "parsedType": {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                        },
                        "keyTypes": [],
                        "name": "Decl",
                        "nested": {
                          "FunctionDecl": {
                            "comment": "Function declaration specifies one or more overloads which indicate the
 function's parameter types and return type.

 Functions have no observable side-effects (there may be side-effects like
 logging which are not observable from CEL).",
                            "fields": {
                              "overloads": {
                                "comment": "Required. List of function overloads, must contain at least one overload.",
                                "id": 1,
                                "options": {
                                  "(telescope:camel)": "overloads",
                                  "(telescope:name)": "overloads",
                                  "(telescope:orig)": "overloads",
                                },
                                "parsedType": {
                                  "name": "Overload",
                                  "type": "Type",
                                },
                                "rule": "repeated",
                                "scope": [
                                  "google.api.expr.v1alpha1",
                                  "Decl",
                                  "FunctionDecl",
                                ],
                                "type": "Overload",
                              },
                            },
                            "keyTypes": [],
                            "name": "FunctionDecl",
                            "nested": {
                              "Overload": {
                                "comment": "An overload indicates a function's parameter types and return type, and
 may optionally include a function body described in terms of [Expr][google.api.expr.v1alpha1.Expr]
 values.

 Functions overloads are declared in either a function or method
 call-style. For methods, the \`params[0]\` is the expected type of the
 target receiver.

 Overloads must have non-overlapping argument types after erasure of all
 parameterized type variables (similar as type erasure in Java).",
                                "fields": {
                                  "doc": {
                                    "comment": "Documentation string for the overload.",
                                    "id": 6,
                                    "isScalar": true,
                                    "options": {
                                      "(telescope:camel)": "doc",
                                      "(telescope:name)": "doc",
                                      "(telescope:orig)": "doc",
                                    },
                                    "parsedType": {
                                      "name": "string",
                                      "type": "native",
                                    },
                                    "type": "string",
                                    "typeNum": 13,
                                  },
                                  "isInstanceFunction": {
                                    "comment": "Whether the function is to be used in a method call-style \`x.f(...)\`
 of a function call-style \`f(x, ...)\`.

 For methods, the first parameter declaration, \`params[0]\` is the
 expected type of the target receiver.",
                                    "id": 5,
                                    "isScalar": true,
                                    "options": {
                                      "(telescope:camel)": "isInstanceFunction",
                                      "(telescope:name)": "isInstanceFunction",
                                      "(telescope:orig)": "is_instance_function",
                                    },
                                    "parsedType": {
                                      "name": "bool",
                                      "type": "native",
                                    },
                                    "type": "bool",
                                    "typeNum": 12,
                                  },
                                  "overloadId": {
                                    "comment": "Required. Globally unique overload name of the function which reflects
 the function name and argument types.

 This will be used by a [Reference][google.api.expr.v1alpha1.Reference] to indicate the \`overload_id\` that
 was resolved for the function \`name\`.",
                                    "id": 1,
                                    "isScalar": true,
                                    "options": {
                                      "(telescope:camel)": "overloadId",
                                      "(telescope:name)": "overloadId",
                                      "(telescope:orig)": "overload_id",
                                    },
                                    "parsedType": {
                                      "name": "string",
                                      "type": "native",
                                    },
                                    "type": "string",
                                    "typeNum": 13,
                                  },
                                  "params": {
                                    "comment": "List of function parameter [Type][google.api.expr.v1alpha1.Type] values.

 Param types are disjoint after generic type parameters have been
 replaced with the type \`DYN\`. Since the \`DYN\` type is compatible with
 any other type, this means that if \`A\` is a type parameter, the
 function types \`int<A>\` and \`int<int>\` are not disjoint. Likewise,
 \`map<string, string>\` is not disjoint from \`map<K, V>\`.

 When the \`result_type\` of a function is a generic type param, the
 type param name also appears as the \`type\` of on at least one params.",
                                    "id": 2,
                                    "options": {
                                      "(telescope:camel)": "params",
                                      "(telescope:name)": "params",
                                      "(telescope:orig)": "params",
                                    },
                                    "parsedType": {
                                      "name": "Type",
                                      "type": "Type",
                                    },
                                    "rule": "repeated",
                                    "scope": [
                                      "google.api.expr.v1alpha1",
                                    ],
                                    "type": "Type",
                                  },
                                  "resultType": {
                                    "comment": "Required. The result type of the function. For example, the operator
 \`string.isEmpty()\` would have \`result_type\` of \`kind: BOOL\`.",
                                    "id": 4,
                                    "options": {
                                      "(telescope:camel)": "resultType",
                                      "(telescope:name)": "resultType",
                                      "(telescope:orig)": "result_type",
                                    },
                                    "parsedType": {
                                      "name": "Type",
                                      "type": "Type",
                                    },
                                    "scope": [
                                      "google.api.expr.v1alpha1",
                                    ],
                                    "type": "Type",
                                  },
                                  "typeParams": {
                                    "comment": "The type param names associated with the function declaration.

 For example, \`function ex<K,V>(K key, map<K, V> map) : V\` would yield
 the type params of \`K, V\`.",
                                    "id": 3,
                                    "isScalar": true,
                                    "options": {
                                      "(telescope:camel)": "typeParams",
                                      "(telescope:name)": "typeParams",
                                      "(telescope:orig)": "type_params",
                                    },
                                    "parsedType": {
                                      "name": "string",
                                      "type": "native",
                                    },
                                    "rule": "repeated",
                                    "type": "string",
                                    "typeNum": 13,
                                  },
                                },
                                "keyTypes": [],
                                "name": "Overload",
                                "nested": null,
                                "oneofs": undefined,
                                "options": undefined,
                                "package": "google.api.expr.v1alpha1",
                                "type": "Type",
                              },
                            },
                            "oneofs": undefined,
                            "options": undefined,
                            "package": "google.api.expr.v1alpha1",
                            "type": "Type",
                          },
                          "IdentDecl": {
                            "comment": "Identifier declaration which specifies its type and optional \`Expr\` value.

 An identifier without a value is a declaration that must be provided at
 evaluation time. An identifier with a value should resolve to a constant,
 but may be used in conjunction with other identifiers bound at evaluation
 time.",
                            "fields": {
                              "doc": {
                                "comment": "Documentation string for the identifier.",
                                "id": 3,
                                "isScalar": true,
                                "options": {
                                  "(telescope:camel)": "doc",
                                  "(telescope:name)": "doc",
                                  "(telescope:orig)": "doc",
                                },
                                "parsedType": {
                                  "name": "string",
                                  "type": "native",
                                },
                                "type": "string",
                                "typeNum": 13,
                              },
                              "type": {
                                "comment": "Required. The type of the identifier.",
                                "id": 1,
                                "options": {
                                  "(telescope:camel)": "type",
                                  "(telescope:name)": "type",
                                  "(telescope:orig)": "type",
                                },
                                "parsedType": {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "scope": [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                              "value": {
                                "comment": "The constant value of the identifier. If not specified, the identifier
 must be supplied at evaluation time.",
                                "id": 2,
                                "import": "google/api/expr/v1alpha1/syntax.proto",
                                "importedName": "Constant",
                                "options": {
                                  "(telescope:camel)": "value",
                                  "(telescope:name)": "value",
                                  "(telescope:orig)": "value",
                                },
                                "parsedType": {
                                  "name": "Constant",
                                  "type": "Type",
                                },
                                "scope": [
                                  [
                                    "google.api.expr.v1alpha1",
                                  ],
                                ],
                                "scopeType": "import",
                                "type": "Constant",
                              },
                            },
                            "keyTypes": [],
                            "name": "IdentDecl",
                            "nested": null,
                            "oneofs": undefined,
                            "options": undefined,
                            "package": "google.api.expr.v1alpha1",
                            "type": "Type",
                          },
                        },
                        "oneofs": {
                          "declKind": {
                            "oneof": [
                              "ident",
                              "function",
                            ],
                          },
                        },
                        "options": undefined,
                        "package": "google.api.expr.v1alpha1",
                        "type": "Type",
                      },
                      "Reference": {
                        "comment": "Describes a resolved reference to a declaration.",
                        "fields": {
                          "name": {
                            "comment": "The fully qualified name of the declaration.",
                            "id": 1,
                            "isScalar": true,
                            "options": {
                              "(telescope:camel)": "name",
                              "(telescope:name)": "name",
                              "(telescope:orig)": "name",
                            },
                            "parsedType": {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "overloadId": {
                            "comment": "For references to functions, this is a list of \`Overload.overload_id\`
 values which match according to typing rules.

 If the list has more than one element, overload resolution among the
 presented candidates must happen at runtime because of dynamic types. The
 type checker attempts to narrow down this list as much as possible.

 Empty if this is not a reference to a [Decl.FunctionDecl][google.api.expr.v1alpha1.Decl.FunctionDecl].",
                            "id": 3,
                            "isScalar": true,
                            "options": {
                              "(telescope:camel)": "overloadId",
                              "(telescope:name)": "overloadId",
                              "(telescope:orig)": "overload_id",
                            },
                            "parsedType": {
                              "name": "string",
                              "type": "native",
                            },
                            "rule": "repeated",
                            "type": "string",
                            "typeNum": 13,
                          },
                          "value": {
                            "comment": "For references to constants, this may contain the value of the
 constant if known at compile time.",
                            "id": 4,
                            "import": "google/api/expr/v1alpha1/syntax.proto",
                            "importedName": "Constant",
                            "options": {
                              "(telescope:camel)": "value",
                              "(telescope:name)": "value",
                              "(telescope:orig)": "value",
                            },
                            "parsedType": {
                              "name": "Constant",
                              "type": "Type",
                            },
                            "scope": [
                              [
                                "google.api.expr.v1alpha1",
                              ],
                            ],
                            "scopeType": "import",
                            "type": "Constant",
                          },
                        },
                        "keyTypes": [],
                        "name": "Reference",
                        "nested": null,
                        "oneofs": undefined,
                        "options": undefined,
                        "package": "google.api.expr.v1alpha1",
                        "type": "Type",
                      },
                      "Type": {
                        "comment": "Represents a CEL type.",
                        "fields": {
                          "abstractType": {
                            "comment": "Abstract, application defined type.",
                            "id": 14,
                            "options": {
                              "(telescope:camel)": "abstractType",
                              "(telescope:name)": "abstractType",
                              "(telescope:orig)": "abstract_type",
                            },
                            "parsedType": {
                              "name": "AbstractType",
                              "type": "Type",
                            },
                            "scope": [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "AbstractType",
                          },
                          "dyn": {
                            "comment": "Dynamic type.",
                            "id": 1,
                            "import": "google/protobuf/empty.proto",
                            "importedName": "google.protobuf.Empty",
                            "isNestedMsg": false,
                            "options": {
                              "(telescope:camel)": "dyn",
                              "(telescope:name)": "dyn",
                              "(telescope:orig)": "dyn",
                            },
                            "parsedType": {
                              "name": "Empty",
                              "type": "Type",
                            },
                            "scope": [
                              "google.protobuf",
                            ],
                            "scopeType": "protoImport",
                            "type": "google.protobuf.Empty",
                          },
                          "error": {
                            "comment": "Error type.

 During type-checking if an expression is an error, its type is propagated
 as the \`ERROR\` type. This permits the type-checker to discover other
 errors present in the expression.",
                            "id": 12,
                            "import": "google/protobuf/empty.proto",
                            "importedName": "google.protobuf.Empty",
                            "isNestedMsg": false,
                            "options": {
                              "(telescope:camel)": "error",
                              "(telescope:name)": "error",
                              "(telescope:orig)": "error",
                            },
                            "parsedType": {
                              "name": "Empty",
                              "type": "Type",
                            },
                            "scope": [
                              "google.protobuf",
                            ],
                            "scopeType": "protoImport",
                            "type": "google.protobuf.Empty",
                          },
                          "function": {
                            "comment": "Function type.",
                            "id": 8,
                            "options": {
                              "(telescope:camel)": "function",
                              "(telescope:name)": "function",
                              "(telescope:orig)": "function",
                            },
                            "parsedType": {
                              "name": "FunctionType",
                              "type": "Type",
                            },
                            "scope": [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "FunctionType",
                          },
                          "listType": {
                            "comment": "Parameterized list with elements of \`list_type\`, e.g. \`list<timestamp>\`.",
                            "id": 6,
                            "options": {
                              "(telescope:camel)": "listType",
                              "(telescope:name)": "listType",
                              "(telescope:orig)": "list_type",
                            },
                            "parsedType": {
                              "name": "ListType",
                              "type": "Type",
                            },
                            "scope": [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "ListType",
                          },
                          "mapType": {
                            "comment": "Parameterized map with typed keys and values.",
                            "id": 7,
                            "options": {
                              "(telescope:camel)": "mapType",
                              "(telescope:name)": "mapType",
                              "(telescope:orig)": "map_type",
                            },
                            "parsedType": {
                              "name": "MapType",
                              "type": "Type",
                            },
                            "scope": [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "MapType",
                          },
                          "messageType": {
                            "comment": "Protocol buffer message type.

 The \`message_type\` string specifies the qualified message type name. For
 example, \`google.plus.Profile\`.",
                            "id": 9,
                            "isScalar": true,
                            "options": {
                              "(telescope:camel)": "messageType",
                              "(telescope:name)": "messageType",
                              "(telescope:orig)": "message_type",
                            },
                            "parsedType": {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "null": {
                            "comment": "Null value.",
                            "id": 2,
                            "import": "google/protobuf/struct.proto",
                            "importedName": "google.protobuf.NullValue",
                            "isNestedMsg": false,
                            "options": {
                              "(telescope:camel)": "null",
                              "(telescope:name)": "null",
                              "(telescope:orig)": "null",
                            },
                            "parsedType": {
                              "name": "NullValue",
                              "type": "Enum",
                            },
                            "scope": [
                              "google.protobuf",
                            ],
                            "scopeType": "protoImport",
                            "type": "google.protobuf.NullValue",
                          },
                          "primitive": {
                            "comment": "Primitive types: \`true\`, \`1u\`, \`-2.0\`, \`'string'\`, \`b'bytes'\`.",
                            "id": 3,
                            "options": {
                              "(telescope:camel)": "primitive",
                              "(telescope:name)": "primitive",
                              "(telescope:orig)": "primitive",
                            },
                            "parsedType": {
                              "name": "PrimitiveType",
                              "type": "Enum",
                            },
                            "scope": [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "PrimitiveType",
                          },
                          "type": {
                            "comment": "Type type.

 The \`type\` value specifies the target type. e.g. int is type with a
 target type of \`Primitive.INT\`.",
                            "id": 11,
                            "options": {
                              "(telescope:camel)": "type",
                              "(telescope:name)": "type",
                              "(telescope:orig)": "type",
                            },
                            "parsedType": {
                              "name": "Type",
                              "type": "Type",
                            },
                            "scope": [
                              "google.api.expr.v1alpha1",
                            ],
                            "type": "Type",
                          },
                          "typeParam": {
                            "comment": "Type param type.

 The \`type_param\` string specifies the type parameter name, e.g. \`list<E>\`
 would be a \`list_type\` whose element type was a \`type_param\` type
 named \`E\`.",
                            "id": 10,
                            "isScalar": true,
                            "options": {
                              "(telescope:camel)": "typeParam",
                              "(telescope:name)": "typeParam",
                              "(telescope:orig)": "type_param",
                            },
                            "parsedType": {
                              "name": "string",
                              "type": "native",
                            },
                            "type": "string",
                            "typeNum": 13,
                          },
                          "wellKnown": {
                            "comment": "Well-known protobuf type such as \`google.protobuf.Timestamp\`.",
                            "id": 5,
                            "options": {
                              "(telescope:camel)": "wellKnown",
                              "(telescope:name)": "wellKnown",
                              "(telescope:orig)": "well_known",
                            },
                            "parsedType": {
                              "name": "WellKnownType",
                              "type": "Enum",
                            },
                            "scope": [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "WellKnownType",
                          },
                          "wrapper": {
                            "comment": "Wrapper of a primitive type, e.g. \`google.protobuf.Int64Value\`.",
                            "id": 4,
                            "options": {
                              "(telescope:camel)": "wrapper",
                              "(telescope:name)": "wrapper",
                              "(telescope:orig)": "wrapper",
                            },
                            "parsedType": {
                              "name": "PrimitiveType",
                              "type": "Enum",
                            },
                            "scope": [
                              "google.api.expr.v1alpha1",
                              "Type",
                            ],
                            "type": "PrimitiveType",
                          },
                        },
                        "keyTypes": [],
                        "name": "Type",
                        "nested": {
                          "AbstractType": {
                            "comment": "Application defined abstract type.",
                            "fields": {
                              "name": {
                                "comment": "The fully qualified name of this abstract type.",
                                "id": 1,
                                "isScalar": true,
                                "options": {
                                  "(telescope:camel)": "name",
                                  "(telescope:name)": "name",
                                  "(telescope:orig)": "name",
                                },
                                "parsedType": {
                                  "name": "string",
                                  "type": "native",
                                },
                                "type": "string",
                                "typeNum": 13,
                              },
                              "parameterTypes": {
                                "comment": "Parameter types for this abstract type.",
                                "id": 2,
                                "options": {
                                  "(telescope:camel)": "parameterTypes",
                                  "(telescope:name)": "parameterTypes",
                                  "(telescope:orig)": "parameter_types",
                                },
                                "parsedType": {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "rule": "repeated",
                                "scope": [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                            },
                            "keyTypes": [],
                            "name": "AbstractType",
                            "nested": null,
                            "oneofs": undefined,
                            "options": undefined,
                            "package": "google.api.expr.v1alpha1",
                            "type": "Type",
                          },
                          "FunctionType": {
                            "comment": "Function type with result and arg types.",
                            "fields": {
                              "argTypes": {
                                "comment": "Argument types of the function.",
                                "id": 2,
                                "options": {
                                  "(telescope:camel)": "argTypes",
                                  "(telescope:name)": "argTypes",
                                  "(telescope:orig)": "arg_types",
                                },
                                "parsedType": {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "rule": "repeated",
                                "scope": [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                              "resultType": {
                                "comment": "Result type of the function.",
                                "id": 1,
                                "options": {
                                  "(telescope:camel)": "resultType",
                                  "(telescope:name)": "resultType",
                                  "(telescope:orig)": "result_type",
                                },
                                "parsedType": {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "scope": [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                            },
                            "keyTypes": [],
                            "name": "FunctionType",
                            "nested": null,
                            "oneofs": undefined,
                            "options": undefined,
                            "package": "google.api.expr.v1alpha1",
                            "type": "Type",
                          },
                          "ListType": {
                            "comment": "List type with typed elements, e.g. \`list<example.proto.MyMessage>\`.",
                            "fields": {
                              "elemType": {
                                "comment": "The element type.",
                                "id": 1,
                                "options": {
                                  "(telescope:camel)": "elemType",
                                  "(telescope:name)": "elemType",
                                  "(telescope:orig)": "elem_type",
                                },
                                "parsedType": {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "scope": [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                            },
                            "keyTypes": [],
                            "name": "ListType",
                            "nested": null,
                            "oneofs": undefined,
                            "options": undefined,
                            "package": "google.api.expr.v1alpha1",
                            "type": "Type",
                          },
                          "MapType": {
                            "comment": "Map type with parameterized key and value types, e.g. \`map<string, int>\`.",
                            "fields": {
                              "keyType": {
                                "comment": "The type of the key.",
                                "id": 1,
                                "options": {
                                  "(telescope:camel)": "keyType",
                                  "(telescope:name)": "keyType",
                                  "(telescope:orig)": "key_type",
                                },
                                "parsedType": {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "scope": [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                              "valueType": {
                                "comment": "The type of the value.",
                                "id": 2,
                                "options": {
                                  "(telescope:camel)": "valueType",
                                  "(telescope:name)": "valueType",
                                  "(telescope:orig)": "value_type",
                                },
                                "parsedType": {
                                  "name": "Type",
                                  "type": "Type",
                                },
                                "scope": [
                                  "google.api.expr.v1alpha1",
                                ],
                                "type": "Type",
                              },
                            },
                            "keyTypes": [],
                            "name": "MapType",
                            "nested": null,
                            "oneofs": undefined,
                            "options": undefined,
                            "package": "google.api.expr.v1alpha1",
                            "type": "Type",
                          },
                          "PrimitiveType": {
                            "comment": "CEL primitive types.",
                            "comments": {
                              "BOOL": "Boolean type.",
                              "BYTES": "Bytes type.",
                              "DOUBLE": "Double type.

 Proto-based float values are widened to double values.",
                              "INT64": "Int64 type.

 Proto-based integer values are widened to int64.",
                              "PRIMITIVE_TYPE_UNSPECIFIED": "Unspecified type.",
                              "STRING": "String type.",
                              "UINT64": "Uint64 type.

 Proto-based unsigned integer values are widened to uint64.",
                            },
                            "name": "PrimitiveType",
                            "package": "google.api.expr.v1alpha1",
                            "type": "Enum",
                            "values": {
                              "BOOL": 1,
                              "BYTES": 6,
                              "DOUBLE": 4,
                              "INT64": 2,
                              "PRIMITIVE_TYPE_UNSPECIFIED": 0,
                              "STRING": 5,
                              "UINT64": 3,
                            },
                          },
                          "WellKnownType": {
                            "comment": "Well-known protobuf types treated with first-class support in CEL.",
                            "comments": {
                              "ANY": "Well-known protobuf.Any type.

 Any types are a polymorphic message type. During type-checking they are
 treated like \`DYN\` types, but at runtime they are resolved to a specific
 message type specified at evaluation time.",
                              "DURATION": "Well-known protobuf.Duration type, internally referenced as \`duration\`.",
                              "TIMESTAMP": "Well-known protobuf.Timestamp type, internally referenced as \`timestamp\`.",
                              "WELL_KNOWN_TYPE_UNSPECIFIED": "Unspecified type.",
                            },
                            "name": "WellKnownType",
                            "package": "google.api.expr.v1alpha1",
                            "type": "Enum",
                            "values": {
                              "ANY": 1,
                              "DURATION": 3,
                              "TIMESTAMP": 2,
                              "WELL_KNOWN_TYPE_UNSPECIFIED": 0,
                            },
                          },
                        },
                        "oneofs": {
                          "typeKind": {
                            "oneof": [
                              "dyn",
                              "null",
                              "primitive",
                              "wrapper",
                              "wellKnown",
                              "listType",
                              "mapType",
                              "function",
                              "messageType",
                              "typeParam",
                              "type",
                              "error",
                              "abstractType",
                            ],
                          },
                        },
                        "options": undefined,
                        "package": "google.api.expr.v1alpha1",
                        "type": "Type",
                      },
                    },
                    "type": "Namespace",
                  },
                },
                "type": "Namespace",
              },
            },
            "type": "Namespace",
          },
        },
        "type": "Namespace",
      },
    },
    "type": "Root",
  },
}
`;

exports[`google/api/expr/v1alpha1/checked 2`] = `
{
  "import": "google/protobuf/empty.proto",
  "importType": "protoImport",
  "importedName": "google.protobuf.Empty",
  "name": "Empty",
  "obj": {
    "_ctor": null,
    "_fieldsArray": null,
    "_fieldsById": null,
    "_nestedArray": [],
    "_oneofsArray": null,
    "comment": "A generic empty message that you can re-use to avoid defining duplicated
 empty messages in your APIs. A typical example is to use it as the request
 or the response type of an API method. For instance:

     service Foo {
       rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);
     }

 The JSON representation for \`Empty\` is empty JSON object \`{}\`.",
    "extensions": undefined,
    "fields": {},
    "filename": null,
    "group": undefined,
    "name": "Empty",
    "nested": undefined,
    "oneofs": undefined,
    "options": undefined,
    "parent": {
      "nested": {
        "Empty": {
          "fields": {},
        },
      },
      "options": {
        "cc_enable_arenas": true,
        "csharp_namespace": "Google.Protobuf.WellKnownTypes",
        "go_package": "types",
        "java_multiple_files": true,
        "java_outer_classname": "EmptyProto",
        "java_package": "com.google.protobuf",
        "objc_class_prefix": "GPB",
      },
    },
    "parsedOptions": null,
    "reserved": undefined,
    "resolved": false,
    "scope": [
      "google.protobuf",
    ],
  },
  "package": "google.protobuf",
}
`;

exports[`google/api/expr/v1alpha1/checked 3`] = `
{
  "import": "google/api/expr/v1alpha1/syntax.proto",
  "importType": "import",
  "importedName": "Constant",
  "name": "Constant",
  "obj": {
    "_ctor": null,
    "_fieldsArray": null,
    "_fieldsById": null,
    "_nestedArray": [],
    "_oneofsArray": null,
    "comment": "Represents a primitive literal.

 Named 'Constant' here for backwards compatibility.

 This is similar as the primitives supported in the well-known type
 \`google.protobuf.Value\`, but richer so it can represent CEL's full range of
 primitives.

 Lists and structs are not included as constants as these aggregate types may
 contain [Expr][google.api.expr.v1alpha1.Expr] elements which require evaluation and are thus not constant.

 Examples of literals include: \`"hello"\`, \`b'bytes'\`, \`1u\`, \`4.2\`, \`-2\`,
 \`true\`, \`null\`.",
    "extensions": undefined,
    "fields": {
      "boolValue": {
        "id": 2,
        "options": {
          "(telescope:camel)": "boolValue",
          "(telescope:name)": "boolValue",
          "(telescope:orig)": "bool_value",
        },
        "type": "bool",
      },
      "bytesValue": {
        "id": 7,
        "options": {
          "(telescope:camel)": "bytesValue",
          "(telescope:name)": "bytesValue",
          "(telescope:orig)": "bytes_value",
        },
        "type": "bytes",
      },
      "doubleValue": {
        "id": 5,
        "options": {
          "(telescope:camel)": "doubleValue",
          "(telescope:name)": "doubleValue",
          "(telescope:orig)": "double_value",
        },
        "type": "double",
      },
      "durationValue": {
        "id": 8,
        "options": {
          "(telescope:camel)": "durationValue",
          "(telescope:name)": "durationValue",
          "(telescope:orig)": "duration_value",
          "deprecated": true,
        },
        "type": "google.protobuf.Duration",
      },
      "int64Value": {
        "id": 3,
        "options": {
          "(telescope:camel)": "int64Value",
          "(telescope:name)": "int64Value",
          "(telescope:orig)": "int64_value",
        },
        "type": "int64",
      },
      "nullValue": {
        "id": 1,
        "options": {
          "(telescope:camel)": "nullValue",
          "(telescope:name)": "nullValue",
          "(telescope:orig)": "null_value",
        },
        "type": "google.protobuf.NullValue",
      },
      "stringValue": {
        "id": 6,
        "options": {
          "(telescope:camel)": "stringValue",
          "(telescope:name)": "stringValue",
          "(telescope:orig)": "string_value",
        },
        "type": "string",
      },
      "timestampValue": {
        "id": 9,
        "options": {
          "(telescope:camel)": "timestampValue",
          "(telescope:name)": "timestampValue",
          "(telescope:orig)": "timestamp_value",
          "deprecated": true,
        },
        "type": "google.protobuf.Timestamp",
      },
      "uint64Value": {
        "id": 4,
        "options": {
          "(telescope:camel)": "uint64Value",
          "(telescope:name)": "uint64Value",
          "(telescope:orig)": "uint64_value",
        },
        "type": "uint64",
      },
    },
    "filename": null,
    "group": undefined,
    "name": "Constant",
    "nested": undefined,
    "oneofs": {
      "constantKind": {
        "oneof": [
          "nullValue",
          "boolValue",
          "int64Value",
          "uint64Value",
          "doubleValue",
          "stringValue",
          "bytesValue",
          "durationValue",
          "timestampValue",
        ],
      },
    },
    "options": undefined,
    "parent": {
      "nested": {
        "Constant": {
          "fields": {
            "boolValue": {
              "id": 2,
              "options": {
                "(telescope:camel)": "boolValue",
                "(telescope:name)": "boolValue",
                "(telescope:orig)": "bool_value",
              },
              "type": "bool",
            },
            "bytesValue": {
              "id": 7,
              "options": {
                "(telescope:camel)": "bytesValue",
                "(telescope:name)": "bytesValue",
                "(telescope:orig)": "bytes_value",
              },
              "type": "bytes",
            },
            "doubleValue": {
              "id": 5,
              "options": {
                "(telescope:camel)": "doubleValue",
                "(telescope:name)": "doubleValue",
                "(telescope:orig)": "double_value",
              },
              "type": "double",
            },
            "durationValue": {
              "id": 8,
              "options": {
                "(telescope:camel)": "durationValue",
                "(telescope:name)": "durationValue",
                "(telescope:orig)": "duration_value",
                "deprecated": true,
              },
              "type": "google.protobuf.Duration",
            },
            "int64Value": {
              "id": 3,
              "options": {
                "(telescope:camel)": "int64Value",
                "(telescope:name)": "int64Value",
                "(telescope:orig)": "int64_value",
              },
              "type": "int64",
            },
            "nullValue": {
              "id": 1,
              "options": {
                "(telescope:camel)": "nullValue",
                "(telescope:name)": "nullValue",
                "(telescope:orig)": "null_value",
              },
              "type": "google.protobuf.NullValue",
            },
            "stringValue": {
              "id": 6,
              "options": {
                "(telescope:camel)": "stringValue",
                "(telescope:name)": "stringValue",
                "(telescope:orig)": "string_value",
              },
              "type": "string",
            },
            "timestampValue": {
              "id": 9,
              "options": {
                "(telescope:camel)": "timestampValue",
                "(telescope:name)": "timestampValue",
                "(telescope:orig)": "timestamp_value",
                "deprecated": true,
              },
              "type": "google.protobuf.Timestamp",
            },
            "uint64Value": {
              "id": 4,
              "options": {
                "(telescope:camel)": "uint64Value",
                "(telescope:name)": "uint64Value",
                "(telescope:orig)": "uint64_value",
              },
              "type": "uint64",
            },
          },
          "oneofs": {
            "constantKind": {
              "oneof": [
                "nullValue",
                "boolValue",
                "int64Value",
                "uint64Value",
                "doubleValue",
                "stringValue",
                "bytesValue",
                "durationValue",
                "timestampValue",
              ],
            },
          },
        },
        "Expr": {
          "fields": {
            "callExpr": {
              "id": 6,
              "options": {
                "(telescope:camel)": "callExpr",
                "(telescope:name)": "callExpr",
                "(telescope:orig)": "call_expr",
              },
              "type": "Call",
            },
            "comprehensionExpr": {
              "id": 9,
              "options": {
                "(telescope:camel)": "comprehensionExpr",
                "(telescope:name)": "comprehensionExpr",
                "(telescope:orig)": "comprehension_expr",
              },
              "type": "Comprehension",
            },
            "constExpr": {
              "id": 3,
              "options": {
                "(telescope:camel)": "constExpr",
                "(telescope:name)": "constExpr",
                "(telescope:orig)": "const_expr",
              },
              "type": "Constant",
            },
            "id": {
              "id": 2,
              "options": {
                "(telescope:camel)": "id",
                "(telescope:name)": "id",
                "(telescope:orig)": "id",
              },
              "type": "int64",
            },
            "identExpr": {
              "id": 4,
              "options": {
                "(telescope:camel)": "identExpr",
                "(telescope:name)": "identExpr",
                "(telescope:orig)": "ident_expr",
              },
              "type": "Ident",
            },
            "listExpr": {
              "id": 7,
              "options": {
                "(telescope:camel)": "listExpr",
                "(telescope:name)": "listExpr",
                "(telescope:orig)": "list_expr",
              },
              "type": "CreateList",
            },
            "selectExpr": {
              "id": 5,
              "options": {
                "(telescope:camel)": "selectExpr",
                "(telescope:name)": "selectExpr",
                "(telescope:orig)": "select_expr",
              },
              "type": "Select",
            },
            "structExpr": {
              "id": 8,
              "options": {
                "(telescope:camel)": "structExpr",
                "(telescope:name)": "structExpr",
                "(telescope:orig)": "struct_expr",
              },
              "type": "CreateStruct",
            },
          },
          "nested": {
            "Call": {
              "fields": {
                "args": {
                  "id": 3,
                  "options": {
                    "(telescope:camel)": "args",
                    "(telescope:name)": "args",
                    "(telescope:orig)": "args",
                  },
                  "rule": "repeated",
                  "type": "Expr",
                },
                "function": {
                  "id": 2,
                  "options": {
                    "(telescope:camel)": "function",
                    "(telescope:name)": "function",
                    "(telescope:orig)": "function",
                  },
                  "type": "string",
                },
                "target": {
                  "id": 1,
                  "options": {
                    "(telescope:camel)": "target",
                    "(telescope:name)": "target",
                    "(telescope:orig)": "target",
                  },
                  "type": "Expr",
                },
              },
            },
            "Comprehension": {
              "fields": {
                "accuInit": {
                  "id": 4,
                  "options": {
                    "(telescope:camel)": "accuInit",
                    "(telescope:name)": "accuInit",
                    "(telescope:orig)": "accu_init",
                  },
                  "type": "Expr",
                },
                "accuVar": {
                  "id": 3,
                  "options": {
                    "(telescope:camel)": "accuVar",
                    "(telescope:name)": "accuVar",
                    "(telescope:orig)": "accu_var",
                  },
                  "type": "string",
                },
                "iterRange": {
                  "id": 2,
                  "options": {
                    "(telescope:camel)": "iterRange",
                    "(telescope:name)": "iterRange",
                    "(telescope:orig)": "iter_range",
                  },
                  "type": "Expr",
                },
                "iterVar": {
                  "id": 1,
                  "options": {
                    "(telescope:camel)": "iterVar",
                    "(telescope:name)": "iterVar",
                    "(telescope:orig)": "iter_var",
                  },
                  "type": "string",
                },
                "loopCondition": {
                  "id": 5,
                  "options": {
                    "(telescope:camel)": "loopCondition",
                    "(telescope:name)": "loopCondition",
                    "(telescope:orig)": "loop_condition",
                  },
                  "type": "Expr",
                },
                "loopStep": {
                  "id": 6,
                  "options": {
                    "(telescope:camel)": "loopStep",
                    "(telescope:name)": "loopStep",
                    "(telescope:orig)": "loop_step",
                  },
                  "type": "Expr",
                },
                "result": {
                  "id": 7,
                  "options": {
                    "(telescope:camel)": "result",
                    "(telescope:name)": "result",
                    "(telescope:orig)": "result",
                  },
                  "type": "Expr",
                },
              },
            },
            "CreateList": {
              "fields": {
                "elements": {
                  "id": 1,
                  "options": {
                    "(telescope:camel)": "elements",
                    "(telescope:name)": "elements",
                    "(telescope:orig)": "elements",
                  },
                  "rule": "repeated",
                  "type": "Expr",
                },
              },
            },
            "CreateStruct": {
              "fields": {
                "entries": {
                  "id": 2,
                  "options": {
                    "(telescope:camel)": "entries",
                    "(telescope:name)": "entries",
                    "(telescope:orig)": "entries",
                  },
                  "rule": "repeated",
                  "type": "Entry",
                },
                "messageName": {
                  "id": 1,
                  "options": {
                    "(telescope:camel)": "messageName",
                    "(telescope:name)": "messageName",
                    "(telescope:orig)": "message_name",
                  },
                  "type": "string",
                },
              },
              "nested": {
                "Entry": {
                  "fields": {
                    "fieldKey": {
                      "id": 2,
                      "options": {
                        "(telescope:camel)": "fieldKey",
                        "(telescope:name)": "fieldKey",
                        "(telescope:orig)": "field_key",
                      },
                      "type": "string",
                    },
                    "id": {
                      "id": 1,
                      "options": {
                        "(telescope:camel)": "id",
                        "(telescope:name)": "id",
                        "(telescope:orig)": "id",
                      },
                      "type": "int64",
                    },
                    "mapKey": {
                      "id": 3,
                      "options": {
                        "(telescope:camel)": "mapKey",
                        "(telescope:name)": "mapKey",
                        "(telescope:orig)": "map_key",
                      },
                      "type": "Expr",
                    },
                    "value": {
                      "id": 4,
                      "options": {
                        "(telescope:camel)": "value",
                        "(telescope:name)": "value",
                        "(telescope:orig)": "value",
                      },
                      "type": "Expr",
                    },
                  },
                  "oneofs": {
                    "keyKind": {
                      "oneof": [
                        "fieldKey",
                        "mapKey",
                      ],
                    },
                  },
                },
              },
            },
            "Ident": {
              "fields": {
                "name": {
                  "id": 1,
                  "options": {
                    "(telescope:camel)": "name",
                    "(telescope:name)": "name",
                    "(telescope:orig)": "name",
                  },
                  "type": "string",
                },
              },
            },
            "Select": {
              "fields": {
                "field": {
                  "id": 2,
                  "options": {
                    "(telescope:camel)": "field",
                    "(telescope:name)": "field",
                    "(telescope:orig)": "field",
                  },
                  "type": "string",
                },
                "operand": {
                  "id": 1,
                  "options": {
                    "(telescope:camel)": "operand",
                    "(telescope:name)": "operand",
                    "(telescope:orig)": "operand",
                  },
                  "type": "Expr",
                },
                "testOnly": {
                  "id": 3,
                  "options": {
                    "(telescope:camel)": "testOnly",
                    "(telescope:name)": "testOnly",
                    "(telescope:orig)": "test_only",
                  },
                  "type": "bool",
                },
              },
            },
          },
          "oneofs": {
            "exprKind": {
              "oneof": [
                "constExpr",
                "identExpr",
                "selectExpr",
                "callExpr",
                "listExpr",
                "structExpr",
                "comprehensionExpr",
              ],
            },
          },
        },
        "ParsedExpr": {
          "fields": {
            "expr": {
              "id": 2,
              "options": {
                "(telescope:camel)": "expr",
                "(telescope:name)": "expr",
                "(telescope:orig)": "expr",
              },
              "type": "Expr",
            },
            "sourceInfo": {
              "id": 3,
              "options": {
                "(telescope:camel)": "sourceInfo",
                "(telescope:name)": "sourceInfo",
                "(telescope:orig)": "source_info",
              },
              "type": "SourceInfo",
            },
          },
        },
        "SourceInfo": {
          "fields": {
            "lineOffsets": {
              "id": 3,
              "options": {
                "(telescope:camel)": "lineOffsets",
                "(telescope:name)": "lineOffsets",
                "(telescope:orig)": "line_offsets",
              },
              "rule": "repeated",
              "type": "int32",
            },
            "location": {
              "id": 2,
              "options": {
                "(telescope:camel)": "location",
                "(telescope:name)": "location",
                "(telescope:orig)": "location",
              },
              "type": "string",
            },
            "macroCalls": {
              "id": 5,
              "keyType": "int64",
              "options": {
                "(telescope:camel)": "macroCalls",
                "(telescope:name)": "macroCalls",
                "(telescope:orig)": "macro_calls",
              },
              "type": "Expr",
            },
            "positions": {
              "id": 4,
              "keyType": "int64",
              "options": {
                "(telescope:camel)": "positions",
                "(telescope:name)": "positions",
                "(telescope:orig)": "positions",
              },
              "type": "int32",
            },
            "syntaxVersion": {
              "id": 1,
              "options": {
                "(telescope:camel)": "syntaxVersion",
                "(telescope:name)": "syntaxVersion",
                "(telescope:orig)": "syntax_version",
              },
              "type": "string",
            },
          },
        },
        "SourcePosition": {
          "fields": {
            "column": {
              "id": 4,
              "options": {
                "(telescope:camel)": "column",
                "(telescope:name)": "column",
                "(telescope:orig)": "column",
              },
              "type": "int32",
            },
            "line": {
              "id": 3,
              "options": {
                "(telescope:camel)": "line",
                "(telescope:name)": "line",
                "(telescope:orig)": "line",
              },
              "type": "int32",
            },
            "location": {
              "id": 1,
              "options": {
                "(telescope:camel)": "location",
                "(telescope:name)": "location",
                "(telescope:orig)": "location",
              },
              "type": "string",
            },
            "offset": {
              "id": 2,
              "options": {
                "(telescope:camel)": "offset",
                "(telescope:name)": "offset",
                "(telescope:orig)": "offset",
              },
              "type": "int32",
            },
          },
        },
      },
      "options": {
        "cc_enable_arenas": true,
        "go_package": "google.golang.org/genproto/googleapis/api/expr/v1alpha1;expr",
        "java_multiple_files": true,
        "java_outer_classname": "SyntaxProto",
        "java_package": "com.google.api.expr.v1alpha1",
      },
    },
    "parsedOptions": null,
    "reserved": undefined,
    "resolved": false,
    "scope": [
      "google.api.expr.v1alpha1",
    ],
  },
}
`;
