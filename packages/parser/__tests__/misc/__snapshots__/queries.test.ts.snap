// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`queries 1`] = `
{
  "Query": {
    "comment": null,
    "methods": {
      "CalcExitPoolCoinsFromShares": {
        "comment": null,
        "fields": {
          "poolId": {
            "comment": null,
            "id": 1,
            "isScalar": true,
            "options": {
              "(telescope:camel)": "poolId",
              "(telescope:name)": "poolId",
              "(telescope:orig)": "pool_id",
            },
            "parsedType": {
              "name": "uint64",
              "type": "native",
            },
            "type": "uint64",
            "typeNum": 8,
          },
          "shareInAmount": {
            "comment": null,
            "id": 2,
            "isScalar": true,
            "options": {
              "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "shareInAmount",
              "(telescope:name)": "shareInAmount",
              "(telescope:orig)": "share_in_amount",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
        },
        "info": {
          "casing": {
            "pool_id": "poolId",
            "share_in_amount": "shareInAmount",
          },
          "method": "get",
          "paramMap": {
            "pool_id": "poolId",
            "share_in_amount": "shareInAmount",
          },
          "pathParams": [
            "pool_id",
          ],
          "queryParams": [
            "share_in_amount",
          ],
          "url": "/osmosis/gamm/v1beta1/pools/{pool_id}/exit_swap_share_amount_in",
        },
        "name": "CalcExitPoolCoinsFromShares",
        "options": {
          "(google.api.http).get": "/osmosis/gamm/v1beta1/pools/{pool_id}/exit_swap_share_amount_in",
        },
        "requestType": "QueryCalcExitPoolCoinsFromSharesRequest",
        "responseType": "QueryCalcExitPoolCoinsFromSharesResponse",
        "type": "ServiceMethod",
      },
      "CalcJoinPoolNoSwapShares": {
        "comment": "Simulates joining pool without a swap. Returns the amount of shares you'd
 get and tokens needed to provide",
        "fields": {
          "poolId": {
            "comment": null,
            "id": 1,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:pool_id",
              "(telescope:camel)": "poolId",
              "(telescope:name)": "poolId",
              "(telescope:orig)": "pool_id",
            },
            "parsedType": {
              "name": "uint64",
              "type": "native",
            },
            "type": "uint64",
            "typeNum": 8,
          },
          "tokensIn": {
            "comment": null,
            "id": 2,
            "import": "cosmos/base/v1beta1/coin.proto",
            "importedName": "cosmos.base.v1beta1.Coin",
            "isNestedMsg": false,
            "options": {
              "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "tokensIn",
              "(telescope:name)": "tokensIn",
              "(telescope:orig)": "tokens_in",
            },
            "parsedType": {
              "name": "Coin",
              "type": "Type",
            },
            "rule": "repeated",
            "scope": [
              "cosmos.base.v1beta1",
            ],
            "scopeType": "protoImport",
            "type": "cosmos.base.v1beta1.Coin",
          },
        },
        "info": undefined,
        "name": "CalcJoinPoolNoSwapShares",
        "options": undefined,
        "requestType": "QueryCalcJoinPoolNoSwapSharesRequest",
        "responseType": "QueryCalcJoinPoolNoSwapSharesResponse",
        "type": "ServiceMethod",
      },
      "CalcJoinPoolShares": {
        "comment": null,
        "fields": {
          "poolId": {
            "comment": null,
            "id": 1,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:pool_id",
              "(telescope:camel)": "poolId",
              "(telescope:name)": "poolId",
              "(telescope:orig)": "pool_id",
            },
            "parsedType": {
              "name": "uint64",
              "type": "native",
            },
            "type": "uint64",
            "typeNum": 8,
          },
          "tokensIn": {
            "comment": null,
            "id": 2,
            "import": "cosmos/base/v1beta1/coin.proto",
            "importedName": "cosmos.base.v1beta1.Coin",
            "isNestedMsg": false,
            "options": {
              "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "tokensIn",
              "(telescope:name)": "tokensIn",
              "(telescope:orig)": "tokens_in",
            },
            "parsedType": {
              "name": "Coin",
              "type": "Type",
            },
            "rule": "repeated",
            "scope": [
              "cosmos.base.v1beta1",
            ],
            "scopeType": "protoImport",
            "type": "cosmos.base.v1beta1.Coin",
          },
        },
        "info": {
          "casing": {
            "pool_id": "poolId",
            "tokens_in": "tokensIn",
          },
          "method": "get",
          "paramMap": {
            "pool_id": "poolId",
            "tokens_in": "tokensIn",
          },
          "pathParams": [
            "pool_id",
          ],
          "queryParams": [
            "tokens_in",
          ],
          "url": "/osmosis/gamm/v1beta1/pools/{pool_id}/join_swap_exact_in",
        },
        "name": "CalcJoinPoolShares",
        "options": {
          "(google.api.http).get": "/osmosis/gamm/v1beta1/pools/{pool_id}/join_swap_exact_in",
        },
        "requestType": "QueryCalcJoinPoolSharesRequest",
        "responseType": "QueryCalcJoinPoolSharesResponse",
        "type": "ServiceMethod",
      },
      "EstimateSwapExactAmountIn": {
        "comment": "Estimate the swap.",
        "fields": {
          "poolId": {
            "comment": null,
            "id": 2,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:pool_id",
              "(telescope:camel)": "poolId",
              "(telescope:name)": "poolId",
              "(telescope:orig)": "pool_id",
            },
            "parsedType": {
              "name": "uint64",
              "type": "native",
            },
            "type": "uint64",
            "typeNum": 8,
          },
          "routes": {
            "comment": null,
            "id": 4,
            "import": "osmosis/gamm/v1beta1/tx.proto",
            "importedName": "SwapAmountInRoute",
            "options": {
              "(gogoproto.moretags)": "yaml:routes",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "routes",
              "(telescope:name)": "routes",
              "(telescope:orig)": "routes",
            },
            "parsedType": {
              "name": "SwapAmountInRoute",
              "type": "Type",
            },
            "rule": "repeated",
            "scope": [
              [
                "osmosis.gamm.v1beta1",
              ],
            ],
            "scopeType": "import",
            "type": "SwapAmountInRoute",
          },
          "sender": {
            "comment": "TODO: CHANGE THIS TO RESERVED IN A PATCH RELEASE",
            "id": 1,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:sender",
              "(telescope:camel)": "sender",
              "(telescope:name)": "sender",
              "(telescope:orig)": "sender",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
          "tokenIn": {
            "comment": null,
            "id": 3,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:token_in",
              "(telescope:camel)": "tokenIn",
              "(telescope:name)": "tokenIn",
              "(telescope:orig)": "token_in",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
        },
        "info": {
          "casing": {
            "pool_id": "poolId",
            "routes": "routes",
            "sender": "sender",
            "token_in": "tokenIn",
          },
          "method": "get",
          "paramMap": {
            "pool_id": "poolId",
            "routes": "routes",
            "sender": "sender",
            "token_in": "tokenIn",
          },
          "pathParams": [
            "pool_id",
          ],
          "queryParams": [
            "sender",
            "token_in",
            "routes",
          ],
          "url": "/osmosis/gamm/v1beta1/{pool_id}/estimate/swap_exact_amount_in",
        },
        "name": "EstimateSwapExactAmountIn",
        "options": {
          "(google.api.http).get": "/osmosis/gamm/v1beta1/{pool_id}/estimate/swap_exact_amount_in",
        },
        "requestType": "QuerySwapExactAmountInRequest",
        "responseType": "QuerySwapExactAmountInResponse",
        "type": "ServiceMethod",
      },
      "EstimateSwapExactAmountOut": {
        "comment": null,
        "fields": {
          "poolId": {
            "comment": null,
            "id": 2,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:pool_id",
              "(telescope:camel)": "poolId",
              "(telescope:name)": "poolId",
              "(telescope:orig)": "pool_id",
            },
            "parsedType": {
              "name": "uint64",
              "type": "native",
            },
            "type": "uint64",
            "typeNum": 8,
          },
          "routes": {
            "comment": null,
            "id": 3,
            "import": "osmosis/gamm/v1beta1/tx.proto",
            "importedName": "SwapAmountOutRoute",
            "options": {
              "(gogoproto.moretags)": "yaml:routes",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "routes",
              "(telescope:name)": "routes",
              "(telescope:orig)": "routes",
            },
            "parsedType": {
              "name": "SwapAmountOutRoute",
              "type": "Type",
            },
            "rule": "repeated",
            "scope": [
              [
                "osmosis.gamm.v1beta1",
              ],
            ],
            "scopeType": "import",
            "type": "SwapAmountOutRoute",
          },
          "sender": {
            "comment": "TODO: CHANGE THIS TO RESERVED IN A PATCH RELEASE",
            "id": 1,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:sender",
              "(telescope:camel)": "sender",
              "(telescope:name)": "sender",
              "(telescope:orig)": "sender",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
          "tokenOut": {
            "comment": null,
            "id": 4,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:token_out",
              "(telescope:camel)": "tokenOut",
              "(telescope:name)": "tokenOut",
              "(telescope:orig)": "token_out",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
        },
        "info": {
          "casing": {
            "pool_id": "poolId",
            "routes": "routes",
            "sender": "sender",
            "token_out": "tokenOut",
          },
          "method": "get",
          "paramMap": {
            "pool_id": "poolId",
            "routes": "routes",
            "sender": "sender",
            "token_out": "tokenOut",
          },
          "pathParams": [
            "pool_id",
          ],
          "queryParams": [
            "sender",
            "routes",
            "token_out",
          ],
          "url": "/osmosis/gamm/v1beta1/{pool_id}/estimate/swap_exact_amount_out",
        },
        "name": "EstimateSwapExactAmountOut",
        "options": {
          "(google.api.http).get": "/osmosis/gamm/v1beta1/{pool_id}/estimate/swap_exact_amount_out",
        },
        "requestType": "QuerySwapExactAmountOutRequest",
        "responseType": "QuerySwapExactAmountOutResponse",
        "type": "ServiceMethod",
      },
      "NumPools": {
        "comment": null,
        "fields": {},
        "info": {
          "casing": {},
          "method": "get",
          "paramMap": {},
          "pathParams": [],
          "queryParams": [],
          "url": "/osmosis/gamm/v1beta1/num_pools",
        },
        "name": "NumPools",
        "options": {
          "(google.api.http).get": "/osmosis/gamm/v1beta1/num_pools",
        },
        "requestType": "QueryNumPoolsRequest",
        "responseType": "QueryNumPoolsResponse",
        "type": "ServiceMethod",
      },
      "Pool": {
        "comment": "Per Pool gRPC Endpoints",
        "fields": {
          "poolId": {
            "comment": null,
            "id": 1,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:pool_id",
              "(telescope:camel)": "poolId",
              "(telescope:name)": "poolId",
              "(telescope:orig)": "pool_id",
            },
            "parsedType": {
              "name": "uint64",
              "type": "native",
            },
            "type": "uint64",
            "typeNum": 8,
          },
        },
        "info": {
          "casing": {
            "pool_id": "poolId",
          },
          "method": "get",
          "paramMap": {
            "pool_id": "poolId",
          },
          "pathParams": [
            "pool_id",
          ],
          "queryParams": [],
          "url": "/osmosis/gamm/v1beta1/pools/{pool_id}",
        },
        "name": "Pool",
        "options": {
          "(google.api.http).get": "/osmosis/gamm/v1beta1/pools/{pool_id}",
        },
        "requestType": "QueryPoolRequest",
        "responseType": "QueryPoolResponse",
        "type": "ServiceMethod",
      },
      "PoolParams": {
        "comment": null,
        "fields": {
          "poolId": {
            "comment": null,
            "id": 1,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:pool_id",
              "(telescope:camel)": "poolId",
              "(telescope:name)": "poolId",
              "(telescope:orig)": "pool_id",
            },
            "parsedType": {
              "name": "uint64",
              "type": "native",
            },
            "type": "uint64",
            "typeNum": 8,
          },
        },
        "info": {
          "casing": {
            "pool_id": "poolId",
          },
          "method": "get",
          "paramMap": {
            "pool_id": "poolId",
          },
          "pathParams": [
            "pool_id",
          ],
          "queryParams": [],
          "url": "/osmosis/gamm/v1beta1/pools/{pool_id}/params",
        },
        "name": "PoolParams",
        "options": {
          "(google.api.http).get": "/osmosis/gamm/v1beta1/pools/{pool_id}/params",
        },
        "requestType": "QueryPoolParamsRequest",
        "responseType": "QueryPoolParamsResponse",
        "type": "ServiceMethod",
      },
      "PoolType": {
        "comment": "PoolType returns the type of the pool.
 Returns "Balancer" as a string literal when the pool is a balancer pool.
 Errors if the pool is failed to be type caseted.",
        "fields": {
          "poolId": {
            "comment": null,
            "id": 1,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:pool_id",
              "(telescope:camel)": "poolId",
              "(telescope:name)": "poolId",
              "(telescope:orig)": "pool_id",
            },
            "parsedType": {
              "name": "uint64",
              "type": "native",
            },
            "type": "uint64",
            "typeNum": 8,
          },
        },
        "info": {
          "casing": {
            "pool_id": "poolId",
          },
          "method": "get",
          "paramMap": {
            "pool_id": "poolId",
          },
          "pathParams": [
            "pool_id",
          ],
          "queryParams": [],
          "url": "/osmosis/gamm/v1beta1/pool_type/{pool_id}",
        },
        "name": "PoolType",
        "options": {
          "(google.api.http).get": "/osmosis/gamm/v1beta1/pool_type/{pool_id}",
        },
        "requestType": "QueryPoolTypeRequest",
        "responseType": "QueryPoolTypeResponse",
        "type": "ServiceMethod",
      },
      "Pools": {
        "comment": null,
        "fields": {
          "pagination": {
            "comment": "pagination defines an optional pagination for the request.",
            "id": 2,
            "import": "cosmos/base/query/v1beta1/pagination.proto",
            "importedName": "cosmos.base.query.v1beta1.PageRequest",
            "isNestedMsg": false,
            "options": {
              "(telescope:camel)": "pagination",
              "(telescope:name)": "pagination",
              "(telescope:orig)": "pagination",
            },
            "parsedType": {
              "name": "PageRequest",
              "type": "Type",
            },
            "scope": [
              "cosmos.base.query.v1beta1",
            ],
            "scopeType": "protoImport",
            "type": "cosmos.base.query.v1beta1.PageRequest",
          },
        },
        "info": {
          "casing": {
            "pagination": "pagination",
          },
          "method": "get",
          "paramMap": {
            "pagination": "pagination",
          },
          "pathParams": [],
          "queryParams": [
            "pagination",
          ],
          "url": "/osmosis/gamm/v1beta1/pools",
        },
        "name": "Pools",
        "options": {
          "(google.api.http).get": "/osmosis/gamm/v1beta1/pools",
        },
        "requestType": "QueryPoolsRequest",
        "responseType": "QueryPoolsResponse",
        "type": "ServiceMethod",
      },
      "PoolsWithFilter": {
        "comment": "PoolsWithFilter allows you to query specific pools with requested
 parameters",
        "fields": {
          "minLiquidity": {
            "comment": null,
            "id": 1,
            "import": "cosmos/base/v1beta1/coin.proto",
            "importedName": "cosmos.base.v1beta1.Coin",
            "isNestedMsg": false,
            "options": {
              "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
              "(gogoproto.moretags)": "yaml:min_liquidity",
              "(gogoproto.nullable)": false,
              "(telescope:camel)": "minLiquidity",
              "(telescope:name)": "minLiquidity",
              "(telescope:orig)": "min_liquidity",
            },
            "parsedType": {
              "name": "Coin",
              "type": "Type",
            },
            "rule": "repeated",
            "scope": [
              "cosmos.base.v1beta1",
            ],
            "scopeType": "protoImport",
            "type": "cosmos.base.v1beta1.Coin",
          },
          "pagination": {
            "comment": null,
            "id": 3,
            "import": "cosmos/base/query/v1beta1/pagination.proto",
            "importedName": "cosmos.base.query.v1beta1.PageRequest",
            "isNestedMsg": false,
            "options": {
              "(telescope:camel)": "pagination",
              "(telescope:name)": "pagination",
              "(telescope:orig)": "pagination",
            },
            "parsedType": {
              "name": "PageRequest",
              "type": "Type",
            },
            "scope": [
              "cosmos.base.query.v1beta1",
            ],
            "scopeType": "protoImport",
            "type": "cosmos.base.query.v1beta1.PageRequest",
          },
          "poolType": {
            "comment": null,
            "id": 2,
            "isScalar": true,
            "options": {
              "(telescope:camel)": "poolType",
              "(telescope:name)": "poolType",
              "(telescope:orig)": "pool_type",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
        },
        "info": {
          "casing": {
            "min_liquidity": "minLiquidity",
            "pagination": "pagination",
            "pool_type": "poolType",
          },
          "method": "get",
          "paramMap": {
            "min_liquidity": "minLiquidity",
            "pagination": "pagination",
            "pool_type": "poolType",
          },
          "pathParams": [],
          "queryParams": [
            "min_liquidity",
            "pool_type",
            "pagination",
          ],
          "url": "/osmosis/gamm/v1beta1/filtered_pools",
        },
        "name": "PoolsWithFilter",
        "options": {
          "(google.api.http).get": "/osmosis/gamm/v1beta1/filtered_pools",
        },
        "requestType": "QueryPoolsWithFilterRequest",
        "responseType": "QueryPoolsWithFilterResponse",
        "type": "ServiceMethod",
      },
      "SpotPrice": {
        "comment": "SpotPrice defines a gRPC query handler that returns the spot price given
 a base denomination and a quote denomination.",
        "fields": {
          "baseAssetDenom": {
            "comment": null,
            "id": 2,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:base_asset_denom",
              "(telescope:camel)": "baseAssetDenom",
              "(telescope:name)": "baseAssetDenom",
              "(telescope:orig)": "base_asset_denom",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
          "poolId": {
            "comment": null,
            "id": 1,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:pool_id",
              "(telescope:camel)": "poolId",
              "(telescope:name)": "poolId",
              "(telescope:orig)": "pool_id",
            },
            "parsedType": {
              "name": "uint64",
              "type": "native",
            },
            "type": "uint64",
            "typeNum": 8,
          },
          "quoteAssetDenom": {
            "comment": null,
            "id": 3,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:quote_asset_denom",
              "(telescope:camel)": "quoteAssetDenom",
              "(telescope:name)": "quoteAssetDenom",
              "(telescope:orig)": "quote_asset_denom",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
        },
        "info": {
          "casing": {
            "base_asset_denom": "baseAssetDenom",
            "pool_id": "poolId",
            "quote_asset_denom": "quoteAssetDenom",
          },
          "method": "get",
          "paramMap": {
            "base_asset_denom": "baseAssetDenom",
            "pool_id": "poolId",
            "quote_asset_denom": "quoteAssetDenom",
          },
          "pathParams": [
            "pool_id",
          ],
          "queryParams": [
            "base_asset_denom",
            "quote_asset_denom",
          ],
          "url": "/osmosis/gamm/v1beta1/pools/{pool_id}/prices",
        },
        "name": "SpotPrice",
        "options": {
          "(google.api.http).get": "/osmosis/gamm/v1beta1/pools/{pool_id}/prices",
          "deprecated": true,
        },
        "requestType": "QuerySpotPriceRequest",
        "responseType": "QuerySpotPriceResponse",
        "type": "ServiceMethod",
      },
      "TotalLiquidity": {
        "comment": null,
        "fields": {},
        "info": {
          "casing": {},
          "method": "get",
          "paramMap": {},
          "pathParams": [],
          "queryParams": [],
          "url": "/osmosis/gamm/v1beta1/total_liquidity",
        },
        "name": "TotalLiquidity",
        "options": {
          "(google.api.http).get": "/osmosis/gamm/v1beta1/total_liquidity",
        },
        "requestType": "QueryTotalLiquidityRequest",
        "responseType": "QueryTotalLiquidityResponse",
        "type": "ServiceMethod",
      },
      "TotalPoolLiquidity": {
        "comment": null,
        "fields": {
          "poolId": {
            "comment": null,
            "id": 1,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:pool_id",
              "(telescope:camel)": "poolId",
              "(telescope:name)": "poolId",
              "(telescope:orig)": "pool_id",
            },
            "parsedType": {
              "name": "uint64",
              "type": "native",
            },
            "type": "uint64",
            "typeNum": 8,
          },
        },
        "info": {
          "casing": {
            "pool_id": "poolId",
          },
          "method": "get",
          "paramMap": {
            "pool_id": "poolId",
          },
          "pathParams": [
            "pool_id",
          ],
          "queryParams": [],
          "url": "/osmosis/gamm/v1beta1/pools/{pool_id}/total_pool_liquidity",
        },
        "name": "TotalPoolLiquidity",
        "options": {
          "(google.api.http).get": "/osmosis/gamm/v1beta1/pools/{pool_id}/total_pool_liquidity",
        },
        "requestType": "QueryTotalPoolLiquidityRequest",
        "responseType": "QueryTotalPoolLiquidityResponse",
        "type": "ServiceMethod",
      },
      "TotalShares": {
        "comment": null,
        "fields": {
          "poolId": {
            "comment": null,
            "id": 1,
            "isScalar": true,
            "options": {
              "(gogoproto.moretags)": "yaml:pool_id",
              "(telescope:camel)": "poolId",
              "(telescope:name)": "poolId",
              "(telescope:orig)": "pool_id",
            },
            "parsedType": {
              "name": "uint64",
              "type": "native",
            },
            "type": "uint64",
            "typeNum": 8,
          },
        },
        "info": {
          "casing": {
            "pool_id": "poolId",
          },
          "method": "get",
          "paramMap": {
            "pool_id": "poolId",
          },
          "pathParams": [
            "pool_id",
          ],
          "queryParams": [],
          "url": "/osmosis/gamm/v1beta1/pools/{pool_id}/total_shares",
        },
        "name": "TotalShares",
        "options": {
          "(google.api.http).get": "/osmosis/gamm/v1beta1/pools/{pool_id}/total_shares",
        },
        "requestType": "QueryTotalSharesRequest",
        "responseType": "QueryTotalSharesResponse",
        "type": "ServiceMethod",
      },
    },
    "name": "Query",
    "type": "Service",
  },
  "QueryCalcExitPoolCoinsFromSharesRequest": {
    "comment": "=============================== CalcExitPoolCoinsFromShares",
    "fields": {
      "poolId": {
        "comment": null,
        "id": 1,
        "isScalar": true,
        "options": {
          "(telescope:camel)": "poolId",
          "(telescope:name)": "poolId",
          "(telescope:orig)": "pool_id",
        },
        "parsedType": {
          "name": "uint64",
          "type": "native",
        },
        "type": "uint64",
        "typeNum": 8,
      },
      "shareInAmount": {
        "comment": null,
        "id": 2,
        "isScalar": true,
        "options": {
          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "shareInAmount",
          "(telescope:name)": "shareInAmount",
          "(telescope:orig)": "share_in_amount",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QueryCalcExitPoolCoinsFromSharesRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryCalcExitPoolCoinsFromSharesResponse": {
    "comment": null,
    "fields": {
      "tokensOut": {
        "comment": null,
        "id": 1,
        "import": "cosmos/base/v1beta1/coin.proto",
        "importedName": "cosmos.base.v1beta1.Coin",
        "isNestedMsg": false,
        "options": {
          "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "tokensOut",
          "(telescope:name)": "tokensOut",
          "(telescope:orig)": "tokens_out",
        },
        "parsedType": {
          "name": "Coin",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          "cosmos.base.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.v1beta1.Coin",
      },
    },
    "keyTypes": [],
    "name": "QueryCalcExitPoolCoinsFromSharesResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryCalcJoinPoolNoSwapSharesRequest": {
    "comment": "=============================== CalcJoinPoolNoSwapShares",
    "fields": {
      "poolId": {
        "comment": null,
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:pool_id",
          "(telescope:camel)": "poolId",
          "(telescope:name)": "poolId",
          "(telescope:orig)": "pool_id",
        },
        "parsedType": {
          "name": "uint64",
          "type": "native",
        },
        "type": "uint64",
        "typeNum": 8,
      },
      "tokensIn": {
        "comment": null,
        "id": 2,
        "import": "cosmos/base/v1beta1/coin.proto",
        "importedName": "cosmos.base.v1beta1.Coin",
        "isNestedMsg": false,
        "options": {
          "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "tokensIn",
          "(telescope:name)": "tokensIn",
          "(telescope:orig)": "tokens_in",
        },
        "parsedType": {
          "name": "Coin",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          "cosmos.base.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.v1beta1.Coin",
      },
    },
    "keyTypes": [],
    "name": "QueryCalcJoinPoolNoSwapSharesRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryCalcJoinPoolNoSwapSharesResponse": {
    "comment": null,
    "fields": {
      "sharesOut": {
        "comment": null,
        "id": 2,
        "isScalar": true,
        "options": {
          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "sharesOut",
          "(telescope:name)": "sharesOut",
          "(telescope:orig)": "shares_out",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
      "tokensOut": {
        "comment": null,
        "id": 1,
        "import": "cosmos/base/v1beta1/coin.proto",
        "importedName": "cosmos.base.v1beta1.Coin",
        "isNestedMsg": false,
        "options": {
          "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
          "(gogoproto.moretags)": "yaml:tokens_out",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "tokensOut",
          "(telescope:name)": "tokensOut",
          "(telescope:orig)": "tokens_out",
        },
        "parsedType": {
          "name": "Coin",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          "cosmos.base.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.v1beta1.Coin",
      },
    },
    "keyTypes": [],
    "name": "QueryCalcJoinPoolNoSwapSharesResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryCalcJoinPoolSharesRequest": {
    "comment": "=============================== CalcJoinPoolShares",
    "fields": {
      "poolId": {
        "comment": null,
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:pool_id",
          "(telescope:camel)": "poolId",
          "(telescope:name)": "poolId",
          "(telescope:orig)": "pool_id",
        },
        "parsedType": {
          "name": "uint64",
          "type": "native",
        },
        "type": "uint64",
        "typeNum": 8,
      },
      "tokensIn": {
        "comment": null,
        "id": 2,
        "import": "cosmos/base/v1beta1/coin.proto",
        "importedName": "cosmos.base.v1beta1.Coin",
        "isNestedMsg": false,
        "options": {
          "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "tokensIn",
          "(telescope:name)": "tokensIn",
          "(telescope:orig)": "tokens_in",
        },
        "parsedType": {
          "name": "Coin",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          "cosmos.base.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.v1beta1.Coin",
      },
    },
    "keyTypes": [],
    "name": "QueryCalcJoinPoolSharesRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryCalcJoinPoolSharesResponse": {
    "comment": null,
    "fields": {
      "shareOutAmount": {
        "comment": null,
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
          "(gogoproto.moretags)": "yaml:share_out_amount",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "shareOutAmount",
          "(telescope:name)": "shareOutAmount",
          "(telescope:orig)": "share_out_amount",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
      "tokensOut": {
        "comment": null,
        "id": 2,
        "import": "cosmos/base/v1beta1/coin.proto",
        "importedName": "cosmos.base.v1beta1.Coin",
        "isNestedMsg": false,
        "options": {
          "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "tokensOut",
          "(telescope:name)": "tokensOut",
          "(telescope:orig)": "tokens_out",
        },
        "parsedType": {
          "name": "Coin",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          "cosmos.base.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.v1beta1.Coin",
      },
    },
    "keyTypes": [],
    "name": "QueryCalcJoinPoolSharesResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryNumPoolsRequest": {
    "comment": "=============================== NumPools",
    "fields": {},
    "keyTypes": [],
    "name": "QueryNumPoolsRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryNumPoolsResponse": {
    "comment": null,
    "fields": {
      "numPools": {
        "comment": null,
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:num_pools",
          "(telescope:camel)": "numPools",
          "(telescope:name)": "numPools",
          "(telescope:orig)": "num_pools",
        },
        "parsedType": {
          "name": "uint64",
          "type": "native",
        },
        "type": "uint64",
        "typeNum": 8,
      },
    },
    "keyTypes": [],
    "name": "QueryNumPoolsResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryPoolParamsRequest": {
    "comment": "=============================== PoolParams",
    "fields": {
      "poolId": {
        "comment": null,
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:pool_id",
          "(telescope:camel)": "poolId",
          "(telescope:name)": "poolId",
          "(telescope:orig)": "pool_id",
        },
        "parsedType": {
          "name": "uint64",
          "type": "native",
        },
        "type": "uint64",
        "typeNum": 8,
      },
    },
    "keyTypes": [],
    "name": "QueryPoolParamsRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryPoolParamsResponse": {
    "comment": null,
    "fields": {
      "params": {
        "comment": null,
        "id": 1,
        "import": "google/protobuf/any.proto",
        "importedName": "google.protobuf.Any",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "params",
          "(telescope:name)": "params",
          "(telescope:orig)": "params",
        },
        "parsedType": {
          "name": "Any",
          "type": "Type",
        },
        "scope": [
          "google.protobuf",
        ],
        "scopeType": "protoImport",
        "type": "google.protobuf.Any",
      },
    },
    "keyTypes": [],
    "name": "QueryPoolParamsResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryPoolRequest": {
    "comment": "=============================== Pool",
    "fields": {
      "poolId": {
        "comment": null,
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:pool_id",
          "(telescope:camel)": "poolId",
          "(telescope:name)": "poolId",
          "(telescope:orig)": "pool_id",
        },
        "parsedType": {
          "name": "uint64",
          "type": "native",
        },
        "type": "uint64",
        "typeNum": 8,
      },
    },
    "keyTypes": [],
    "name": "QueryPoolRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryPoolResponse": {
    "comment": null,
    "fields": {
      "pool": {
        "comment": null,
        "id": 1,
        "import": "google/protobuf/any.proto",
        "importedName": "google.protobuf.Any",
        "isNestedMsg": false,
        "options": {
          "(cosmos_proto.accepts_interface)": "PoolI",
          "(telescope:camel)": "pool",
          "(telescope:name)": "pool",
          "(telescope:orig)": "pool",
        },
        "parsedType": {
          "name": "Any",
          "type": "Type",
        },
        "scope": [
          "google.protobuf",
        ],
        "scopeType": "protoImport",
        "type": "google.protobuf.Any",
      },
    },
    "keyTypes": [],
    "name": "QueryPoolResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryPoolTypeRequest": {
    "comment": "=============================== PoolType",
    "fields": {
      "poolId": {
        "comment": null,
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:pool_id",
          "(telescope:camel)": "poolId",
          "(telescope:name)": "poolId",
          "(telescope:orig)": "pool_id",
        },
        "parsedType": {
          "name": "uint64",
          "type": "native",
        },
        "type": "uint64",
        "typeNum": 8,
      },
    },
    "keyTypes": [],
    "name": "QueryPoolTypeRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryPoolTypeResponse": {
    "comment": null,
    "fields": {
      "poolType": {
        "comment": null,
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:pool_type",
          "(telescope:camel)": "poolType",
          "(telescope:name)": "poolType",
          "(telescope:orig)": "pool_type",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QueryPoolTypeResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryPoolsRequest": {
    "comment": "=============================== Pools",
    "fields": {
      "pagination": {
        "comment": "pagination defines an optional pagination for the request.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageRequest",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageRequest",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageRequest",
      },
    },
    "keyTypes": [],
    "name": "QueryPoolsRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryPoolsResponse": {
    "comment": null,
    "fields": {
      "pagination": {
        "comment": "pagination defines the pagination in the response.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageResponse",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageResponse",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageResponse",
      },
      "pools": {
        "comment": null,
        "id": 1,
        "import": "google/protobuf/any.proto",
        "importedName": "google.protobuf.Any",
        "isNestedMsg": false,
        "options": {
          "(cosmos_proto.accepts_interface)": "PoolI",
          "(telescope:camel)": "pools",
          "(telescope:name)": "pools",
          "(telescope:orig)": "pools",
        },
        "parsedType": {
          "name": "Any",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          "google.protobuf",
        ],
        "scopeType": "protoImport",
        "type": "google.protobuf.Any",
      },
    },
    "keyTypes": [],
    "name": "QueryPoolsResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryPoolsWithFilterRequest": {
    "comment": null,
    "fields": {
      "minLiquidity": {
        "comment": null,
        "id": 1,
        "import": "cosmos/base/v1beta1/coin.proto",
        "importedName": "cosmos.base.v1beta1.Coin",
        "isNestedMsg": false,
        "options": {
          "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
          "(gogoproto.moretags)": "yaml:min_liquidity",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "minLiquidity",
          "(telescope:name)": "minLiquidity",
          "(telescope:orig)": "min_liquidity",
        },
        "parsedType": {
          "name": "Coin",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          "cosmos.base.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.v1beta1.Coin",
      },
      "pagination": {
        "comment": null,
        "id": 3,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageRequest",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageRequest",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageRequest",
      },
      "poolType": {
        "comment": null,
        "id": 2,
        "isScalar": true,
        "options": {
          "(telescope:camel)": "poolType",
          "(telescope:name)": "poolType",
          "(telescope:orig)": "pool_type",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QueryPoolsWithFilterRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryPoolsWithFilterResponse": {
    "comment": null,
    "fields": {
      "pagination": {
        "comment": "pagination defines the pagination in the response.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageResponse",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageResponse",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageResponse",
      },
      "pools": {
        "comment": null,
        "id": 1,
        "import": "google/protobuf/any.proto",
        "importedName": "google.protobuf.Any",
        "isNestedMsg": false,
        "options": {
          "(cosmos_proto.accepts_interface)": "PoolI",
          "(telescope:camel)": "pools",
          "(telescope:name)": "pools",
          "(telescope:orig)": "pools",
        },
        "parsedType": {
          "name": "Any",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          "google.protobuf",
        ],
        "scopeType": "protoImport",
        "type": "google.protobuf.Any",
      },
    },
    "keyTypes": [],
    "name": "QueryPoolsWithFilterResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QuerySpotPriceRequest": {
    "comment": "QuerySpotPriceRequest defines the gRPC request structure for a SpotPrice
 query.",
    "fields": {
      "baseAssetDenom": {
        "comment": null,
        "id": 2,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:base_asset_denom",
          "(telescope:camel)": "baseAssetDenom",
          "(telescope:name)": "baseAssetDenom",
          "(telescope:orig)": "base_asset_denom",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
      "poolId": {
        "comment": null,
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:pool_id",
          "(telescope:camel)": "poolId",
          "(telescope:name)": "poolId",
          "(telescope:orig)": "pool_id",
        },
        "parsedType": {
          "name": "uint64",
          "type": "native",
        },
        "type": "uint64",
        "typeNum": 8,
      },
      "quoteAssetDenom": {
        "comment": null,
        "id": 3,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:quote_asset_denom",
          "(telescope:camel)": "quoteAssetDenom",
          "(telescope:name)": "quoteAssetDenom",
          "(telescope:orig)": "quote_asset_denom",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QuerySpotPriceRequest",
    "nested": null,
    "oneofs": undefined,
    "options": {
      "deprecated": true,
    },
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QuerySpotPriceResponse": {
    "comment": "QuerySpotPriceResponse defines the gRPC response structure for a SpotPrice
 query.",
    "fields": {
      "spotPrice": {
        "comment": "String of the Dec. Ex) 10.203uatom",
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:spot_price",
          "(telescope:camel)": "spotPrice",
          "(telescope:name)": "spotPrice",
          "(telescope:orig)": "spot_price",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QuerySpotPriceResponse",
    "nested": null,
    "oneofs": undefined,
    "options": {
      "deprecated": true,
    },
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QuerySwapExactAmountInRequest": {
    "comment": "=============================== EstimateSwapExactAmountIn",
    "fields": {
      "poolId": {
        "comment": null,
        "id": 2,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:pool_id",
          "(telescope:camel)": "poolId",
          "(telescope:name)": "poolId",
          "(telescope:orig)": "pool_id",
        },
        "parsedType": {
          "name": "uint64",
          "type": "native",
        },
        "type": "uint64",
        "typeNum": 8,
      },
      "routes": {
        "comment": null,
        "id": 4,
        "import": "osmosis/gamm/v1beta1/tx.proto",
        "importedName": "SwapAmountInRoute",
        "options": {
          "(gogoproto.moretags)": "yaml:routes",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "routes",
          "(telescope:name)": "routes",
          "(telescope:orig)": "routes",
        },
        "parsedType": {
          "name": "SwapAmountInRoute",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          [
            "osmosis.gamm.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "SwapAmountInRoute",
      },
      "sender": {
        "comment": "TODO: CHANGE THIS TO RESERVED IN A PATCH RELEASE",
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:sender",
          "(telescope:camel)": "sender",
          "(telescope:name)": "sender",
          "(telescope:orig)": "sender",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
      "tokenIn": {
        "comment": null,
        "id": 3,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:token_in",
          "(telescope:camel)": "tokenIn",
          "(telescope:name)": "tokenIn",
          "(telescope:orig)": "token_in",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QuerySwapExactAmountInRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QuerySwapExactAmountInResponse": {
    "comment": null,
    "fields": {
      "tokenOutAmount": {
        "comment": null,
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
          "(gogoproto.moretags)": "yaml:token_out_amount",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "tokenOutAmount",
          "(telescope:name)": "tokenOutAmount",
          "(telescope:orig)": "token_out_amount",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QuerySwapExactAmountInResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QuerySwapExactAmountOutRequest": {
    "comment": "=============================== EstimateSwapExactAmountOut",
    "fields": {
      "poolId": {
        "comment": null,
        "id": 2,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:pool_id",
          "(telescope:camel)": "poolId",
          "(telescope:name)": "poolId",
          "(telescope:orig)": "pool_id",
        },
        "parsedType": {
          "name": "uint64",
          "type": "native",
        },
        "type": "uint64",
        "typeNum": 8,
      },
      "routes": {
        "comment": null,
        "id": 3,
        "import": "osmosis/gamm/v1beta1/tx.proto",
        "importedName": "SwapAmountOutRoute",
        "options": {
          "(gogoproto.moretags)": "yaml:routes",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "routes",
          "(telescope:name)": "routes",
          "(telescope:orig)": "routes",
        },
        "parsedType": {
          "name": "SwapAmountOutRoute",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          [
            "osmosis.gamm.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "SwapAmountOutRoute",
      },
      "sender": {
        "comment": "TODO: CHANGE THIS TO RESERVED IN A PATCH RELEASE",
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:sender",
          "(telescope:camel)": "sender",
          "(telescope:name)": "sender",
          "(telescope:orig)": "sender",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
      "tokenOut": {
        "comment": null,
        "id": 4,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:token_out",
          "(telescope:camel)": "tokenOut",
          "(telescope:name)": "tokenOut",
          "(telescope:orig)": "token_out",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QuerySwapExactAmountOutRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QuerySwapExactAmountOutResponse": {
    "comment": null,
    "fields": {
      "tokenInAmount": {
        "comment": null,
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.customtype)": "github.com/cosmos/cosmos-sdk/types.Int",
          "(gogoproto.moretags)": "yaml:token_in_amount",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "tokenInAmount",
          "(telescope:name)": "tokenInAmount",
          "(telescope:orig)": "token_in_amount",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QuerySwapExactAmountOutResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryTotalLiquidityRequest": {
    "comment": null,
    "fields": {},
    "keyTypes": [],
    "name": "QueryTotalLiquidityRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryTotalLiquidityResponse": {
    "comment": null,
    "fields": {
      "liquidity": {
        "comment": null,
        "id": 1,
        "import": "cosmos/base/v1beta1/coin.proto",
        "importedName": "cosmos.base.v1beta1.Coin",
        "isNestedMsg": false,
        "options": {
          "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
          "(gogoproto.moretags)": "yaml:liquidity",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "liquidity",
          "(telescope:name)": "liquidity",
          "(telescope:orig)": "liquidity",
        },
        "parsedType": {
          "name": "Coin",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          "cosmos.base.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.v1beta1.Coin",
      },
    },
    "keyTypes": [],
    "name": "QueryTotalLiquidityResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryTotalPoolLiquidityRequest": {
    "comment": "=============================== PoolLiquidity",
    "fields": {
      "poolId": {
        "comment": null,
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:pool_id",
          "(telescope:camel)": "poolId",
          "(telescope:name)": "poolId",
          "(telescope:orig)": "pool_id",
        },
        "parsedType": {
          "name": "uint64",
          "type": "native",
        },
        "type": "uint64",
        "typeNum": 8,
      },
    },
    "keyTypes": [],
    "name": "QueryTotalPoolLiquidityRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryTotalPoolLiquidityResponse": {
    "comment": null,
    "fields": {
      "liquidity": {
        "comment": null,
        "id": 1,
        "import": "cosmos/base/v1beta1/coin.proto",
        "importedName": "cosmos.base.v1beta1.Coin",
        "isNestedMsg": false,
        "options": {
          "(gogoproto.castrepeated)": "github.com/cosmos/cosmos-sdk/types.Coins",
          "(gogoproto.moretags)": "yaml:liquidity",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "liquidity",
          "(telescope:name)": "liquidity",
          "(telescope:orig)": "liquidity",
        },
        "parsedType": {
          "name": "Coin",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          "cosmos.base.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.v1beta1.Coin",
      },
    },
    "keyTypes": [],
    "name": "QueryTotalPoolLiquidityResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryTotalSharesRequest": {
    "comment": "=============================== TotalShares",
    "fields": {
      "poolId": {
        "comment": null,
        "id": 1,
        "isScalar": true,
        "options": {
          "(gogoproto.moretags)": "yaml:pool_id",
          "(telescope:camel)": "poolId",
          "(telescope:name)": "poolId",
          "(telescope:orig)": "pool_id",
        },
        "parsedType": {
          "name": "uint64",
          "type": "native",
        },
        "type": "uint64",
        "typeNum": 8,
      },
    },
    "keyTypes": [],
    "name": "QueryTotalSharesRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
  "QueryTotalSharesResponse": {
    "comment": null,
    "fields": {
      "totalShares": {
        "comment": null,
        "id": 1,
        "import": "cosmos/base/v1beta1/coin.proto",
        "importedName": "cosmos.base.v1beta1.Coin",
        "isNestedMsg": false,
        "options": {
          "(gogoproto.moretags)": "yaml:total_shares",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "totalShares",
          "(telescope:name)": "totalShares",
          "(telescope:orig)": "total_shares",
        },
        "parsedType": {
          "name": "Coin",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.v1beta1.Coin",
      },
    },
    "keyTypes": [],
    "name": "QueryTotalSharesResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "osmosis.gamm.v1beta1",
    "type": "Type",
  },
}
`;
