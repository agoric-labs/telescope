// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`queries 1`] = `
{
  "Query": {
    "comment": "Query defines the gRPC querier service.",
    "methods": {
      "Delegation": {
        "comment": "Delegation queries delegate info for given validator delegator pair.",
        "fields": {
          "delegator_addr": {
            "comment": "delegator_addr defines the delegator address to query for.",
            "id": 1,
            "isScalar": true,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "delegatorAddr",
              "(telescope:name)": "delegator_addr",
              "(telescope:orig)": "delegator_addr",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
          "validator_addr": {
            "comment": "validator_addr defines the validator address to query for.",
            "id": 2,
            "isScalar": true,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "validatorAddr",
              "(telescope:name)": "validator_addr",
              "(telescope:orig)": "validator_addr",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
        },
        "info": {
          "casing": {
            "delegator_addr": "delegator_addr",
            "validator_addr": "validator_addr",
          },
          "method": "get",
          "paramMap": {
            "delegator_addr": "delegator_addr",
            "validator_addr": "validator_addr",
          },
          "pathParams": [
            "validator_addr",
            "delegator_addr",
          ],
          "queryParams": [],
          "url": "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}",
        },
        "name": "Delegation",
        "options": {
          "(google.api.http).get": "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}",
        },
        "requestType": "QueryDelegationRequest",
        "responseType": "QueryDelegationResponse",
        "type": "ServiceMethod",
      },
      "DelegatorDelegations": {
        "comment": "DelegatorDelegations queries all delegations of a given delegator address.",
        "fields": {
          "delegator_addr": {
            "comment": "delegator_addr defines the delegator address to query for.",
            "id": 1,
            "isScalar": true,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "delegatorAddr",
              "(telescope:name)": "delegator_addr",
              "(telescope:orig)": "delegator_addr",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
          "pagination": {
            "comment": "pagination defines an optional pagination for the request.",
            "id": 2,
            "import": "cosmos/base/query/v1beta1/pagination.proto",
            "importedName": "cosmos.base.query.v1beta1.PageRequest",
            "isNestedMsg": false,
            "options": {
              "(telescope:camel)": "pagination",
              "(telescope:name)": "pagination",
              "(telescope:orig)": "pagination",
            },
            "parsedType": {
              "name": "PageRequest",
              "type": "Type",
            },
            "scope": [
              "cosmos.base.query.v1beta1",
            ],
            "scopeType": "protoImport",
            "type": "cosmos.base.query.v1beta1.PageRequest",
          },
        },
        "info": {
          "casing": {
            "delegator_addr": "delegator_addr",
            "pagination": "pagination",
          },
          "method": "get",
          "paramMap": {
            "delegator_addr": "delegator_addr",
            "pagination": "pagination",
          },
          "pathParams": [
            "delegator_addr",
          ],
          "queryParams": [
            "pagination",
          ],
          "url": "/cosmos/staking/v1beta1/delegations/{delegator_addr}",
        },
        "name": "DelegatorDelegations",
        "options": {
          "(google.api.http).get": "/cosmos/staking/v1beta1/delegations/{delegator_addr}",
        },
        "requestType": "QueryDelegatorDelegationsRequest",
        "responseType": "QueryDelegatorDelegationsResponse",
        "type": "ServiceMethod",
      },
      "DelegatorUnbondingDelegations": {
        "comment": "DelegatorUnbondingDelegations queries all unbonding delegations of a given
 delegator address.",
        "fields": {
          "delegator_addr": {
            "comment": "delegator_addr defines the delegator address to query for.",
            "id": 1,
            "isScalar": true,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "delegatorAddr",
              "(telescope:name)": "delegator_addr",
              "(telescope:orig)": "delegator_addr",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
          "pagination": {
            "comment": "pagination defines an optional pagination for the request.",
            "id": 2,
            "import": "cosmos/base/query/v1beta1/pagination.proto",
            "importedName": "cosmos.base.query.v1beta1.PageRequest",
            "isNestedMsg": false,
            "options": {
              "(telescope:camel)": "pagination",
              "(telescope:name)": "pagination",
              "(telescope:orig)": "pagination",
            },
            "parsedType": {
              "name": "PageRequest",
              "type": "Type",
            },
            "scope": [
              "cosmos.base.query.v1beta1",
            ],
            "scopeType": "protoImport",
            "type": "cosmos.base.query.v1beta1.PageRequest",
          },
        },
        "info": {
          "casing": {
            "delegator_addr": "delegator_addr",
            "pagination": "pagination",
          },
          "method": "get",
          "paramMap": {
            "delegator_addr": "delegator_addr",
            "pagination": "pagination",
          },
          "pathParams": [
            "delegator_addr",
          ],
          "queryParams": [
            "pagination",
          ],
          "url": "/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations",
        },
        "name": "DelegatorUnbondingDelegations",
        "options": {
          "(google.api.http).get": "/cosmos/staking/v1beta1/delegators/{delegator_addr}/unbonding_delegations",
        },
        "requestType": "QueryDelegatorUnbondingDelegationsRequest",
        "responseType": "QueryDelegatorUnbondingDelegationsResponse",
        "type": "ServiceMethod",
      },
      "DelegatorValidator": {
        "comment": "DelegatorValidator queries validator info for given delegator validator
 pair.",
        "fields": {
          "delegator_addr": {
            "comment": "delegator_addr defines the delegator address to query for.",
            "id": 1,
            "isScalar": true,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "delegatorAddr",
              "(telescope:name)": "delegator_addr",
              "(telescope:orig)": "delegator_addr",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
          "validator_addr": {
            "comment": "validator_addr defines the validator address to query for.",
            "id": 2,
            "isScalar": true,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "validatorAddr",
              "(telescope:name)": "validator_addr",
              "(telescope:orig)": "validator_addr",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
        },
        "info": {
          "casing": {
            "delegator_addr": "delegator_addr",
            "validator_addr": "validator_addr",
          },
          "method": "get",
          "paramMap": {
            "delegator_addr": "delegator_addr",
            "validator_addr": "validator_addr",
          },
          "pathParams": [
            "delegator_addr",
            "validator_addr",
          ],
          "queryParams": [],
          "url": "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}",
        },
        "name": "DelegatorValidator",
        "options": {
          "(google.api.http).get": "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators/{validator_addr}",
        },
        "requestType": "QueryDelegatorValidatorRequest",
        "responseType": "QueryDelegatorValidatorResponse",
        "type": "ServiceMethod",
      },
      "DelegatorValidators": {
        "comment": "DelegatorValidators queries all validators info for given delegator
 address.",
        "fields": {
          "delegator_addr": {
            "comment": "delegator_addr defines the delegator address to query for.",
            "id": 1,
            "isScalar": true,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "delegatorAddr",
              "(telescope:name)": "delegator_addr",
              "(telescope:orig)": "delegator_addr",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
          "pagination": {
            "comment": "pagination defines an optional pagination for the request.",
            "id": 2,
            "import": "cosmos/base/query/v1beta1/pagination.proto",
            "importedName": "cosmos.base.query.v1beta1.PageRequest",
            "isNestedMsg": false,
            "options": {
              "(telescope:camel)": "pagination",
              "(telescope:name)": "pagination",
              "(telescope:orig)": "pagination",
            },
            "parsedType": {
              "name": "PageRequest",
              "type": "Type",
            },
            "scope": [
              "cosmos.base.query.v1beta1",
            ],
            "scopeType": "protoImport",
            "type": "cosmos.base.query.v1beta1.PageRequest",
          },
        },
        "info": {
          "casing": {
            "delegator_addr": "delegator_addr",
            "pagination": "pagination",
          },
          "method": "get",
          "paramMap": {
            "delegator_addr": "delegator_addr",
            "pagination": "pagination",
          },
          "pathParams": [
            "delegator_addr",
          ],
          "queryParams": [
            "pagination",
          ],
          "url": "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators",
        },
        "name": "DelegatorValidators",
        "options": {
          "(google.api.http).get": "/cosmos/staking/v1beta1/delegators/{delegator_addr}/validators",
        },
        "requestType": "QueryDelegatorValidatorsRequest",
        "responseType": "QueryDelegatorValidatorsResponse",
        "type": "ServiceMethod",
      },
      "HistoricalInfo": {
        "comment": "HistoricalInfo queries the historical info for given height.",
        "fields": {
          "height": {
            "comment": "height defines at which height to query the historical info.",
            "id": 1,
            "isScalar": true,
            "options": {
              "(telescope:camel)": "height",
              "(telescope:name)": "height",
              "(telescope:orig)": "height",
            },
            "parsedType": {
              "name": "int64",
              "type": "native",
            },
            "type": "int64",
            "typeNum": 7,
          },
        },
        "info": {
          "casing": {
            "height": "height",
          },
          "method": "get",
          "paramMap": {
            "height": "height",
          },
          "pathParams": [
            "height",
          ],
          "queryParams": [],
          "url": "/cosmos/staking/v1beta1/historical_info/{height}",
        },
        "name": "HistoricalInfo",
        "options": {
          "(google.api.http).get": "/cosmos/staking/v1beta1/historical_info/{height}",
        },
        "requestType": "QueryHistoricalInfoRequest",
        "responseType": "QueryHistoricalInfoResponse",
        "type": "ServiceMethod",
      },
      "Params": {
        "comment": "Parameters queries the staking parameters.",
        "fields": {},
        "info": {
          "casing": {},
          "method": "get",
          "paramMap": {},
          "pathParams": [],
          "queryParams": [],
          "url": "/cosmos/staking/v1beta1/params",
        },
        "name": "Params",
        "options": {
          "(google.api.http).get": "/cosmos/staking/v1beta1/params",
        },
        "requestType": "QueryParamsRequest",
        "responseType": "QueryParamsResponse",
        "type": "ServiceMethod",
      },
      "Pool": {
        "comment": "Pool queries the pool info.",
        "fields": {},
        "info": {
          "casing": {},
          "method": "get",
          "paramMap": {},
          "pathParams": [],
          "queryParams": [],
          "url": "/cosmos/staking/v1beta1/pool",
        },
        "name": "Pool",
        "options": {
          "(google.api.http).get": "/cosmos/staking/v1beta1/pool",
        },
        "requestType": "QueryPoolRequest",
        "responseType": "QueryPoolResponse",
        "type": "ServiceMethod",
      },
      "Redelegations": {
        "comment": "Redelegations queries redelegations of given address.",
        "fields": {
          "delegator_addr": {
            "comment": "delegator_addr defines the delegator address to query for.",
            "id": 1,
            "isScalar": true,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "delegatorAddr",
              "(telescope:name)": "delegator_addr",
              "(telescope:orig)": "delegator_addr",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
          "dst_validator_addr": {
            "comment": "dst_validator_addr defines the validator address to redelegate to.",
            "id": 3,
            "isScalar": true,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "dstValidatorAddr",
              "(telescope:name)": "dst_validator_addr",
              "(telescope:orig)": "dst_validator_addr",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
          "pagination": {
            "comment": "pagination defines an optional pagination for the request.",
            "id": 4,
            "import": "cosmos/base/query/v1beta1/pagination.proto",
            "importedName": "cosmos.base.query.v1beta1.PageRequest",
            "isNestedMsg": false,
            "options": {
              "(telescope:camel)": "pagination",
              "(telescope:name)": "pagination",
              "(telescope:orig)": "pagination",
            },
            "parsedType": {
              "name": "PageRequest",
              "type": "Type",
            },
            "scope": [
              "cosmos.base.query.v1beta1",
            ],
            "scopeType": "protoImport",
            "type": "cosmos.base.query.v1beta1.PageRequest",
          },
          "src_validator_addr": {
            "comment": "src_validator_addr defines the validator address to redelegate from.",
            "id": 2,
            "isScalar": true,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "srcValidatorAddr",
              "(telescope:name)": "src_validator_addr",
              "(telescope:orig)": "src_validator_addr",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
        },
        "info": {
          "casing": {
            "delegator_addr": "delegator_addr",
            "dst_validator_addr": "dst_validator_addr",
            "pagination": "pagination",
            "src_validator_addr": "src_validator_addr",
          },
          "method": "get",
          "paramMap": {
            "delegator_addr": "delegator_addr",
            "dst_validator_addr": "dst_validator_addr",
            "pagination": "pagination",
            "src_validator_addr": "src_validator_addr",
          },
          "pathParams": [
            "delegator_addr",
          ],
          "queryParams": [
            "src_validator_addr",
            "dst_validator_addr",
            "pagination",
          ],
          "url": "/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations",
        },
        "name": "Redelegations",
        "options": {
          "(google.api.http).get": "/cosmos/staking/v1beta1/delegators/{delegator_addr}/redelegations",
        },
        "requestType": "QueryRedelegationsRequest",
        "responseType": "QueryRedelegationsResponse",
        "type": "ServiceMethod",
      },
      "UnbondingDelegation": {
        "comment": "UnbondingDelegation queries unbonding info for given validator delegator
 pair.",
        "fields": {
          "delegator_addr": {
            "comment": "delegator_addr defines the delegator address to query for.",
            "id": 1,
            "isScalar": true,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "delegatorAddr",
              "(telescope:name)": "delegator_addr",
              "(telescope:orig)": "delegator_addr",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
          "validator_addr": {
            "comment": "validator_addr defines the validator address to query for.",
            "id": 2,
            "isScalar": true,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "validatorAddr",
              "(telescope:name)": "validator_addr",
              "(telescope:orig)": "validator_addr",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
        },
        "info": {
          "casing": {
            "delegator_addr": "delegator_addr",
            "validator_addr": "validator_addr",
          },
          "method": "get",
          "paramMap": {
            "delegator_addr": "delegator_addr",
            "validator_addr": "validator_addr",
          },
          "pathParams": [
            "validator_addr",
            "delegator_addr",
          ],
          "queryParams": [],
          "url": "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation",
        },
        "name": "UnbondingDelegation",
        "options": {
          "(google.api.http).get": "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations/{delegator_addr}/unbonding_delegation",
        },
        "requestType": "QueryUnbondingDelegationRequest",
        "responseType": "QueryUnbondingDelegationResponse",
        "type": "ServiceMethod",
      },
      "Validator": {
        "comment": "Validator queries validator info for given validator address.",
        "fields": {
          "validator_addr": {
            "comment": "validator_addr defines the validator address to query for.",
            "id": 1,
            "isScalar": true,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "validatorAddr",
              "(telescope:name)": "validator_addr",
              "(telescope:orig)": "validator_addr",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
        },
        "info": {
          "casing": {
            "validator_addr": "validator_addr",
          },
          "method": "get",
          "paramMap": {
            "validator_addr": "validator_addr",
          },
          "pathParams": [
            "validator_addr",
          ],
          "queryParams": [],
          "url": "/cosmos/staking/v1beta1/validators/{validator_addr}",
        },
        "name": "Validator",
        "options": {
          "(google.api.http).get": "/cosmos/staking/v1beta1/validators/{validator_addr}",
        },
        "requestType": "QueryValidatorRequest",
        "responseType": "QueryValidatorResponse",
        "type": "ServiceMethod",
      },
      "ValidatorDelegations": {
        "comment": "ValidatorDelegations queries delegate info for given validator.",
        "fields": {
          "pagination": {
            "comment": "pagination defines an optional pagination for the request.",
            "id": 2,
            "import": "cosmos/base/query/v1beta1/pagination.proto",
            "importedName": "cosmos.base.query.v1beta1.PageRequest",
            "isNestedMsg": false,
            "options": {
              "(telescope:camel)": "pagination",
              "(telescope:name)": "pagination",
              "(telescope:orig)": "pagination",
            },
            "parsedType": {
              "name": "PageRequest",
              "type": "Type",
            },
            "scope": [
              "cosmos.base.query.v1beta1",
            ],
            "scopeType": "protoImport",
            "type": "cosmos.base.query.v1beta1.PageRequest",
          },
          "validator_addr": {
            "comment": "validator_addr defines the validator address to query for.",
            "id": 1,
            "isScalar": true,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "validatorAddr",
              "(telescope:name)": "validator_addr",
              "(telescope:orig)": "validator_addr",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
        },
        "info": {
          "casing": {
            "pagination": "pagination",
            "validator_addr": "validator_addr",
          },
          "method": "get",
          "paramMap": {
            "pagination": "pagination",
            "validator_addr": "validator_addr",
          },
          "pathParams": [
            "validator_addr",
          ],
          "queryParams": [
            "pagination",
          ],
          "url": "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations",
        },
        "name": "ValidatorDelegations",
        "options": {
          "(google.api.http).get": "/cosmos/staking/v1beta1/validators/{validator_addr}/delegations",
        },
        "requestType": "QueryValidatorDelegationsRequest",
        "responseType": "QueryValidatorDelegationsResponse",
        "type": "ServiceMethod",
      },
      "ValidatorUnbondingDelegations": {
        "comment": "ValidatorUnbondingDelegations queries unbonding delegations of a validator.",
        "fields": {
          "pagination": {
            "comment": "pagination defines an optional pagination for the request.",
            "id": 2,
            "import": "cosmos/base/query/v1beta1/pagination.proto",
            "importedName": "cosmos.base.query.v1beta1.PageRequest",
            "isNestedMsg": false,
            "options": {
              "(telescope:camel)": "pagination",
              "(telescope:name)": "pagination",
              "(telescope:orig)": "pagination",
            },
            "parsedType": {
              "name": "PageRequest",
              "type": "Type",
            },
            "scope": [
              "cosmos.base.query.v1beta1",
            ],
            "scopeType": "protoImport",
            "type": "cosmos.base.query.v1beta1.PageRequest",
          },
          "validator_addr": {
            "comment": "validator_addr defines the validator address to query for.",
            "id": 1,
            "isScalar": true,
            "options": {
              "(cosmos_proto.scalar)": "cosmos.AddressString",
              "(telescope:camel)": "validatorAddr",
              "(telescope:name)": "validator_addr",
              "(telescope:orig)": "validator_addr",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
        },
        "info": {
          "casing": {
            "pagination": "pagination",
            "validator_addr": "validator_addr",
          },
          "method": "get",
          "paramMap": {
            "pagination": "pagination",
            "validator_addr": "validator_addr",
          },
          "pathParams": [
            "validator_addr",
          ],
          "queryParams": [
            "pagination",
          ],
          "url": "/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations",
        },
        "name": "ValidatorUnbondingDelegations",
        "options": {
          "(google.api.http).get": "/cosmos/staking/v1beta1/validators/{validator_addr}/unbonding_delegations",
        },
        "requestType": "QueryValidatorUnbondingDelegationsRequest",
        "responseType": "QueryValidatorUnbondingDelegationsResponse",
        "type": "ServiceMethod",
      },
      "Validators": {
        "comment": "Validators queries all validators that match the given status.",
        "fields": {
          "pagination": {
            "comment": "pagination defines an optional pagination for the request.",
            "id": 2,
            "import": "cosmos/base/query/v1beta1/pagination.proto",
            "importedName": "cosmos.base.query.v1beta1.PageRequest",
            "isNestedMsg": false,
            "options": {
              "(telescope:camel)": "pagination",
              "(telescope:name)": "pagination",
              "(telescope:orig)": "pagination",
            },
            "parsedType": {
              "name": "PageRequest",
              "type": "Type",
            },
            "scope": [
              "cosmos.base.query.v1beta1",
            ],
            "scopeType": "protoImport",
            "type": "cosmos.base.query.v1beta1.PageRequest",
          },
          "status": {
            "comment": "status enables to query for validators matching a given status.",
            "id": 1,
            "isScalar": true,
            "options": {
              "(telescope:camel)": "status",
              "(telescope:name)": "status",
              "(telescope:orig)": "status",
            },
            "parsedType": {
              "name": "string",
              "type": "native",
            },
            "type": "string",
            "typeNum": 13,
          },
        },
        "info": {
          "casing": {
            "pagination": "pagination",
            "status": "status",
          },
          "method": "get",
          "paramMap": {
            "pagination": "pagination",
            "status": "status",
          },
          "pathParams": [],
          "queryParams": [
            "status",
            "pagination",
          ],
          "url": "/cosmos/staking/v1beta1/validators",
        },
        "name": "Validators",
        "options": {
          "(google.api.http).get": "/cosmos/staking/v1beta1/validators",
        },
        "requestType": "QueryValidatorsRequest",
        "responseType": "QueryValidatorsResponse",
        "type": "ServiceMethod",
      },
    },
    "name": "Query",
    "type": "Service",
  },
  "QueryDelegationRequest": {
    "comment": "QueryDelegationRequest is request type for the Query/Delegation RPC method.",
    "fields": {
      "delegator_addr": {
        "comment": "delegator_addr defines the delegator address to query for.",
        "id": 1,
        "isScalar": true,
        "options": {
          "(cosmos_proto.scalar)": "cosmos.AddressString",
          "(telescope:camel)": "delegatorAddr",
          "(telescope:name)": "delegator_addr",
          "(telescope:orig)": "delegator_addr",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
      "validator_addr": {
        "comment": "validator_addr defines the validator address to query for.",
        "id": 2,
        "isScalar": true,
        "options": {
          "(cosmos_proto.scalar)": "cosmos.AddressString",
          "(telescope:camel)": "validatorAddr",
          "(telescope:name)": "validator_addr",
          "(telescope:orig)": "validator_addr",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QueryDelegationRequest",
    "nested": null,
    "oneofs": undefined,
    "options": {
      "(gogoproto.equal)": false,
      "(gogoproto.goproto_getters)": false,
    },
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryDelegationResponse": {
    "comment": "QueryDelegationResponse is response type for the Query/Delegation RPC method.",
    "fields": {
      "delegation_response": {
        "comment": "delegation_responses defines the delegation info of a delegation.",
        "id": 1,
        "import": "cosmos/staking/v1beta1/staking.proto",
        "importedName": "DelegationResponse",
        "options": {
          "(telescope:camel)": "delegationResponse",
          "(telescope:name)": "delegation_response",
          "(telescope:orig)": "delegation_response",
        },
        "parsedType": {
          "name": "DelegationResponse",
          "type": "Type",
        },
        "scope": [
          [
            "cosmos.staking.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "DelegationResponse",
      },
    },
    "keyTypes": [],
    "name": "QueryDelegationResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryDelegatorDelegationsRequest": {
    "comment": "QueryDelegatorDelegationsRequest is request type for the
 Query/DelegatorDelegations RPC method.",
    "fields": {
      "delegator_addr": {
        "comment": "delegator_addr defines the delegator address to query for.",
        "id": 1,
        "isScalar": true,
        "options": {
          "(cosmos_proto.scalar)": "cosmos.AddressString",
          "(telescope:camel)": "delegatorAddr",
          "(telescope:name)": "delegator_addr",
          "(telescope:orig)": "delegator_addr",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
      "pagination": {
        "comment": "pagination defines an optional pagination for the request.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageRequest",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageRequest",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageRequest",
      },
    },
    "keyTypes": [],
    "name": "QueryDelegatorDelegationsRequest",
    "nested": null,
    "oneofs": undefined,
    "options": {
      "(gogoproto.equal)": false,
      "(gogoproto.goproto_getters)": false,
    },
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryDelegatorDelegationsResponse": {
    "comment": "QueryDelegatorDelegationsResponse is response type for the
 Query/DelegatorDelegations RPC method.",
    "fields": {
      "delegation_responses": {
        "comment": "delegation_responses defines all the delegations' info of a delegator.",
        "id": 1,
        "import": "cosmos/staking/v1beta1/staking.proto",
        "importedName": "DelegationResponse",
        "options": {
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "delegationResponses",
          "(telescope:name)": "delegation_responses",
          "(telescope:orig)": "delegation_responses",
        },
        "parsedType": {
          "name": "DelegationResponse",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          [
            "cosmos.staking.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "DelegationResponse",
      },
      "pagination": {
        "comment": "pagination defines the pagination in the response.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageResponse",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageResponse",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageResponse",
      },
    },
    "keyTypes": [],
    "name": "QueryDelegatorDelegationsResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryDelegatorUnbondingDelegationsRequest": {
    "comment": "QueryDelegatorUnbondingDelegationsRequest is request type for the
 Query/DelegatorUnbondingDelegations RPC method.",
    "fields": {
      "delegator_addr": {
        "comment": "delegator_addr defines the delegator address to query for.",
        "id": 1,
        "isScalar": true,
        "options": {
          "(cosmos_proto.scalar)": "cosmos.AddressString",
          "(telescope:camel)": "delegatorAddr",
          "(telescope:name)": "delegator_addr",
          "(telescope:orig)": "delegator_addr",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
      "pagination": {
        "comment": "pagination defines an optional pagination for the request.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageRequest",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageRequest",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageRequest",
      },
    },
    "keyTypes": [],
    "name": "QueryDelegatorUnbondingDelegationsRequest",
    "nested": null,
    "oneofs": undefined,
    "options": {
      "(gogoproto.equal)": false,
      "(gogoproto.goproto_getters)": false,
    },
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryDelegatorUnbondingDelegationsResponse": {
    "comment": "QueryUnbondingDelegatorDelegationsResponse is response type for the
 Query/UnbondingDelegatorDelegations RPC method.",
    "fields": {
      "pagination": {
        "comment": "pagination defines the pagination in the response.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageResponse",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageResponse",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageResponse",
      },
      "unbonding_responses": {
        "comment": null,
        "id": 1,
        "import": "cosmos/staking/v1beta1/staking.proto",
        "importedName": "UnbondingDelegation",
        "options": {
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "unbondingResponses",
          "(telescope:name)": "unbonding_responses",
          "(telescope:orig)": "unbonding_responses",
        },
        "parsedType": {
          "name": "UnbondingDelegation",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          [
            "cosmos.staking.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "UnbondingDelegation",
      },
    },
    "keyTypes": [],
    "name": "QueryDelegatorUnbondingDelegationsResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryDelegatorValidatorRequest": {
    "comment": "QueryDelegatorValidatorRequest is request type for the
 Query/DelegatorValidator RPC method.",
    "fields": {
      "delegator_addr": {
        "comment": "delegator_addr defines the delegator address to query for.",
        "id": 1,
        "isScalar": true,
        "options": {
          "(cosmos_proto.scalar)": "cosmos.AddressString",
          "(telescope:camel)": "delegatorAddr",
          "(telescope:name)": "delegator_addr",
          "(telescope:orig)": "delegator_addr",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
      "validator_addr": {
        "comment": "validator_addr defines the validator address to query for.",
        "id": 2,
        "isScalar": true,
        "options": {
          "(cosmos_proto.scalar)": "cosmos.AddressString",
          "(telescope:camel)": "validatorAddr",
          "(telescope:name)": "validator_addr",
          "(telescope:orig)": "validator_addr",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QueryDelegatorValidatorRequest",
    "nested": null,
    "oneofs": undefined,
    "options": {
      "(gogoproto.equal)": false,
      "(gogoproto.goproto_getters)": false,
    },
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryDelegatorValidatorResponse": {
    "comment": "QueryDelegatorValidatorResponse response type for the
 Query/DelegatorValidator RPC method.",
    "fields": {
      "validator": {
        "comment": "validator defines the the validator info.",
        "id": 1,
        "import": "cosmos/staking/v1beta1/staking.proto",
        "importedName": "Validator",
        "options": {
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "validator",
          "(telescope:name)": "validator",
          "(telescope:orig)": "validator",
        },
        "parsedType": {
          "name": "Validator",
          "type": "Type",
        },
        "scope": [
          [
            "cosmos.staking.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "Validator",
      },
    },
    "keyTypes": [],
    "name": "QueryDelegatorValidatorResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryDelegatorValidatorsRequest": {
    "comment": "QueryDelegatorValidatorsRequest is request type for the
 Query/DelegatorValidators RPC method.",
    "fields": {
      "delegator_addr": {
        "comment": "delegator_addr defines the delegator address to query for.",
        "id": 1,
        "isScalar": true,
        "options": {
          "(cosmos_proto.scalar)": "cosmos.AddressString",
          "(telescope:camel)": "delegatorAddr",
          "(telescope:name)": "delegator_addr",
          "(telescope:orig)": "delegator_addr",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
      "pagination": {
        "comment": "pagination defines an optional pagination for the request.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageRequest",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageRequest",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageRequest",
      },
    },
    "keyTypes": [],
    "name": "QueryDelegatorValidatorsRequest",
    "nested": null,
    "oneofs": undefined,
    "options": {
      "(gogoproto.equal)": false,
      "(gogoproto.goproto_getters)": false,
    },
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryDelegatorValidatorsResponse": {
    "comment": "QueryDelegatorValidatorsResponse is response type for the
 Query/DelegatorValidators RPC method.",
    "fields": {
      "pagination": {
        "comment": "pagination defines the pagination in the response.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageResponse",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageResponse",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageResponse",
      },
      "validators": {
        "comment": "validators defines the the validators' info of a delegator.",
        "id": 1,
        "import": "cosmos/staking/v1beta1/staking.proto",
        "importedName": "Validator",
        "options": {
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "validators",
          "(telescope:name)": "validators",
          "(telescope:orig)": "validators",
        },
        "parsedType": {
          "name": "Validator",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          [
            "cosmos.staking.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "Validator",
      },
    },
    "keyTypes": [],
    "name": "QueryDelegatorValidatorsResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryHistoricalInfoRequest": {
    "comment": "QueryHistoricalInfoRequest is request type for the Query/HistoricalInfo RPC
 method.",
    "fields": {
      "height": {
        "comment": "height defines at which height to query the historical info.",
        "id": 1,
        "isScalar": true,
        "options": {
          "(telescope:camel)": "height",
          "(telescope:name)": "height",
          "(telescope:orig)": "height",
        },
        "parsedType": {
          "name": "int64",
          "type": "native",
        },
        "type": "int64",
        "typeNum": 7,
      },
    },
    "keyTypes": [],
    "name": "QueryHistoricalInfoRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryHistoricalInfoResponse": {
    "comment": "QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC
 method.",
    "fields": {
      "hist": {
        "comment": "hist defines the historical info at the given height.",
        "id": 1,
        "import": "cosmos/staking/v1beta1/staking.proto",
        "importedName": "HistoricalInfo",
        "options": {
          "(telescope:camel)": "hist",
          "(telescope:name)": "hist",
          "(telescope:orig)": "hist",
        },
        "parsedType": {
          "name": "HistoricalInfo",
          "type": "Type",
        },
        "scope": [
          [
            "cosmos.staking.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "HistoricalInfo",
      },
    },
    "keyTypes": [],
    "name": "QueryHistoricalInfoResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryParamsRequest": {
    "comment": "QueryParamsRequest is request type for the Query/Params RPC method.",
    "fields": {},
    "keyTypes": [],
    "name": "QueryParamsRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryParamsResponse": {
    "comment": "QueryParamsResponse is response type for the Query/Params RPC method.",
    "fields": {
      "params": {
        "comment": "params holds all the parameters of this module.",
        "id": 1,
        "import": "cosmos/staking/v1beta1/staking.proto",
        "importedName": "Params",
        "options": {
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "params",
          "(telescope:name)": "params",
          "(telescope:orig)": "params",
        },
        "parsedType": {
          "name": "Params",
          "type": "Type",
        },
        "scope": [
          [
            "cosmos.staking.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "Params",
      },
    },
    "keyTypes": [],
    "name": "QueryParamsResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryPoolRequest": {
    "comment": "QueryPoolRequest is request type for the Query/Pool RPC method.",
    "fields": {},
    "keyTypes": [],
    "name": "QueryPoolRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryPoolResponse": {
    "comment": "QueryPoolResponse is response type for the Query/Pool RPC method.",
    "fields": {
      "pool": {
        "comment": "pool defines the pool info.",
        "id": 1,
        "import": "cosmos/staking/v1beta1/staking.proto",
        "importedName": "Pool",
        "options": {
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "pool",
          "(telescope:name)": "pool",
          "(telescope:orig)": "pool",
        },
        "parsedType": {
          "name": "Pool",
          "type": "Type",
        },
        "scope": [
          [
            "cosmos.staking.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "Pool",
      },
    },
    "keyTypes": [],
    "name": "QueryPoolResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryRedelegationsRequest": {
    "comment": "QueryRedelegationsRequest is request type for the Query/Redelegations RPC
 method.",
    "fields": {
      "delegator_addr": {
        "comment": "delegator_addr defines the delegator address to query for.",
        "id": 1,
        "isScalar": true,
        "options": {
          "(cosmos_proto.scalar)": "cosmos.AddressString",
          "(telescope:camel)": "delegatorAddr",
          "(telescope:name)": "delegator_addr",
          "(telescope:orig)": "delegator_addr",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
      "dst_validator_addr": {
        "comment": "dst_validator_addr defines the validator address to redelegate to.",
        "id": 3,
        "isScalar": true,
        "options": {
          "(cosmos_proto.scalar)": "cosmos.AddressString",
          "(telescope:camel)": "dstValidatorAddr",
          "(telescope:name)": "dst_validator_addr",
          "(telescope:orig)": "dst_validator_addr",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
      "pagination": {
        "comment": "pagination defines an optional pagination for the request.",
        "id": 4,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageRequest",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageRequest",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageRequest",
      },
      "src_validator_addr": {
        "comment": "src_validator_addr defines the validator address to redelegate from.",
        "id": 2,
        "isScalar": true,
        "options": {
          "(cosmos_proto.scalar)": "cosmos.AddressString",
          "(telescope:camel)": "srcValidatorAddr",
          "(telescope:name)": "src_validator_addr",
          "(telescope:orig)": "src_validator_addr",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QueryRedelegationsRequest",
    "nested": null,
    "oneofs": undefined,
    "options": {
      "(gogoproto.equal)": false,
      "(gogoproto.goproto_getters)": false,
    },
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryRedelegationsResponse": {
    "comment": "QueryRedelegationsResponse is response type for the Query/Redelegations RPC
 method.",
    "fields": {
      "pagination": {
        "comment": "pagination defines the pagination in the response.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageResponse",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageResponse",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageResponse",
      },
      "redelegation_responses": {
        "comment": null,
        "id": 1,
        "import": "cosmos/staking/v1beta1/staking.proto",
        "importedName": "RedelegationResponse",
        "options": {
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "redelegationResponses",
          "(telescope:name)": "redelegation_responses",
          "(telescope:orig)": "redelegation_responses",
        },
        "parsedType": {
          "name": "RedelegationResponse",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          [
            "cosmos.staking.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "RedelegationResponse",
      },
    },
    "keyTypes": [],
    "name": "QueryRedelegationsResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryUnbondingDelegationRequest": {
    "comment": "QueryUnbondingDelegationRequest is request type for the
 Query/UnbondingDelegation RPC method.",
    "fields": {
      "delegator_addr": {
        "comment": "delegator_addr defines the delegator address to query for.",
        "id": 1,
        "isScalar": true,
        "options": {
          "(cosmos_proto.scalar)": "cosmos.AddressString",
          "(telescope:camel)": "delegatorAddr",
          "(telescope:name)": "delegator_addr",
          "(telescope:orig)": "delegator_addr",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
      "validator_addr": {
        "comment": "validator_addr defines the validator address to query for.",
        "id": 2,
        "isScalar": true,
        "options": {
          "(cosmos_proto.scalar)": "cosmos.AddressString",
          "(telescope:camel)": "validatorAddr",
          "(telescope:name)": "validator_addr",
          "(telescope:orig)": "validator_addr",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QueryUnbondingDelegationRequest",
    "nested": null,
    "oneofs": undefined,
    "options": {
      "(gogoproto.equal)": false,
      "(gogoproto.goproto_getters)": false,
    },
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryUnbondingDelegationResponse": {
    "comment": "QueryDelegationResponse is response type for the Query/UnbondingDelegation
 RPC method.",
    "fields": {
      "unbond": {
        "comment": "unbond defines the unbonding information of a delegation.",
        "id": 1,
        "import": "cosmos/staking/v1beta1/staking.proto",
        "importedName": "UnbondingDelegation",
        "options": {
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "unbond",
          "(telescope:name)": "unbond",
          "(telescope:orig)": "unbond",
        },
        "parsedType": {
          "name": "UnbondingDelegation",
          "type": "Type",
        },
        "scope": [
          [
            "cosmos.staking.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "UnbondingDelegation",
      },
    },
    "keyTypes": [],
    "name": "QueryUnbondingDelegationResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryValidatorDelegationsRequest": {
    "comment": "QueryValidatorDelegationsRequest is request type for the
 Query/ValidatorDelegations RPC method",
    "fields": {
      "pagination": {
        "comment": "pagination defines an optional pagination for the request.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageRequest",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageRequest",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageRequest",
      },
      "validator_addr": {
        "comment": "validator_addr defines the validator address to query for.",
        "id": 1,
        "isScalar": true,
        "options": {
          "(cosmos_proto.scalar)": "cosmos.AddressString",
          "(telescope:camel)": "validatorAddr",
          "(telescope:name)": "validator_addr",
          "(telescope:orig)": "validator_addr",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QueryValidatorDelegationsRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryValidatorDelegationsResponse": {
    "comment": "QueryValidatorDelegationsResponse is response type for the
 Query/ValidatorDelegations RPC method",
    "fields": {
      "delegation_responses": {
        "comment": null,
        "id": 1,
        "import": "cosmos/staking/v1beta1/staking.proto",
        "importedName": "DelegationResponse",
        "options": {
          "(gogoproto.castrepeated)": "DelegationResponses",
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "delegationResponses",
          "(telescope:name)": "delegation_responses",
          "(telescope:orig)": "delegation_responses",
        },
        "parsedType": {
          "name": "DelegationResponse",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          [
            "cosmos.staking.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "DelegationResponse",
      },
      "pagination": {
        "comment": "pagination defines the pagination in the response.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageResponse",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageResponse",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageResponse",
      },
    },
    "keyTypes": [],
    "name": "QueryValidatorDelegationsResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryValidatorRequest": {
    "comment": "QueryValidatorRequest is response type for the Query/Validator RPC method",
    "fields": {
      "validator_addr": {
        "comment": "validator_addr defines the validator address to query for.",
        "id": 1,
        "isScalar": true,
        "options": {
          "(cosmos_proto.scalar)": "cosmos.AddressString",
          "(telescope:camel)": "validatorAddr",
          "(telescope:name)": "validator_addr",
          "(telescope:orig)": "validator_addr",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QueryValidatorRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryValidatorResponse": {
    "comment": "QueryValidatorResponse is response type for the Query/Validator RPC method",
    "fields": {
      "validator": {
        "comment": "validator defines the the validator info.",
        "id": 1,
        "import": "cosmos/staking/v1beta1/staking.proto",
        "importedName": "Validator",
        "options": {
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "validator",
          "(telescope:name)": "validator",
          "(telescope:orig)": "validator",
        },
        "parsedType": {
          "name": "Validator",
          "type": "Type",
        },
        "scope": [
          [
            "cosmos.staking.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "Validator",
      },
    },
    "keyTypes": [],
    "name": "QueryValidatorResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryValidatorUnbondingDelegationsRequest": {
    "comment": "QueryValidatorUnbondingDelegationsRequest is required type for the
 Query/ValidatorUnbondingDelegations RPC method",
    "fields": {
      "pagination": {
        "comment": "pagination defines an optional pagination for the request.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageRequest",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageRequest",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageRequest",
      },
      "validator_addr": {
        "comment": "validator_addr defines the validator address to query for.",
        "id": 1,
        "isScalar": true,
        "options": {
          "(cosmos_proto.scalar)": "cosmos.AddressString",
          "(telescope:camel)": "validatorAddr",
          "(telescope:name)": "validator_addr",
          "(telescope:orig)": "validator_addr",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QueryValidatorUnbondingDelegationsRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryValidatorUnbondingDelegationsResponse": {
    "comment": "QueryValidatorUnbondingDelegationsResponse is response type for the
 Query/ValidatorUnbondingDelegations RPC method.",
    "fields": {
      "pagination": {
        "comment": "pagination defines the pagination in the response.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageResponse",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageResponse",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageResponse",
      },
      "unbonding_responses": {
        "comment": null,
        "id": 1,
        "import": "cosmos/staking/v1beta1/staking.proto",
        "importedName": "UnbondingDelegation",
        "options": {
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "unbondingResponses",
          "(telescope:name)": "unbonding_responses",
          "(telescope:orig)": "unbonding_responses",
        },
        "parsedType": {
          "name": "UnbondingDelegation",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          [
            "cosmos.staking.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "UnbondingDelegation",
      },
    },
    "keyTypes": [],
    "name": "QueryValidatorUnbondingDelegationsResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryValidatorsRequest": {
    "comment": "QueryValidatorsRequest is request type for Query/Validators RPC method.",
    "fields": {
      "pagination": {
        "comment": "pagination defines an optional pagination for the request.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageRequest",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageRequest",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageRequest",
      },
      "status": {
        "comment": "status enables to query for validators matching a given status.",
        "id": 1,
        "isScalar": true,
        "options": {
          "(telescope:camel)": "status",
          "(telescope:name)": "status",
          "(telescope:orig)": "status",
        },
        "parsedType": {
          "name": "string",
          "type": "native",
        },
        "type": "string",
        "typeNum": 13,
      },
    },
    "keyTypes": [],
    "name": "QueryValidatorsRequest",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
  "QueryValidatorsResponse": {
    "comment": "QueryValidatorsResponse is response type for the Query/Validators RPC method",
    "fields": {
      "pagination": {
        "comment": "pagination defines the pagination in the response.",
        "id": 2,
        "import": "cosmos/base/query/v1beta1/pagination.proto",
        "importedName": "cosmos.base.query.v1beta1.PageResponse",
        "isNestedMsg": false,
        "options": {
          "(telescope:camel)": "pagination",
          "(telescope:name)": "pagination",
          "(telescope:orig)": "pagination",
        },
        "parsedType": {
          "name": "PageResponse",
          "type": "Type",
        },
        "scope": [
          "cosmos.base.query.v1beta1",
        ],
        "scopeType": "protoImport",
        "type": "cosmos.base.query.v1beta1.PageResponse",
      },
      "validators": {
        "comment": "validators contains all the queried validators.",
        "id": 1,
        "import": "cosmos/staking/v1beta1/staking.proto",
        "importedName": "Validator",
        "options": {
          "(gogoproto.nullable)": false,
          "(telescope:camel)": "validators",
          "(telescope:name)": "validators",
          "(telescope:orig)": "validators",
        },
        "parsedType": {
          "name": "Validator",
          "type": "Type",
        },
        "rule": "repeated",
        "scope": [
          [
            "cosmos.staking.v1beta1",
          ],
        ],
        "scopeType": "import",
        "type": "Validator",
      },
    },
    "keyTypes": [],
    "name": "QueryValidatorsResponse",
    "nested": null,
    "oneofs": undefined,
    "options": undefined,
    "package": "cosmos.staking.v1beta1",
    "type": "Type",
  },
}
`;
